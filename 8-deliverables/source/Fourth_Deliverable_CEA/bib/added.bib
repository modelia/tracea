% Encoding: UTF-8
@INPROCEEDINGS{hotlmann2020-MB-traceability-terminology,  author={J. {Holtmann} and J. -P. {Steghöfer} and M. {Rath} and D. {Schmelter}},  booktitle={2020 IEEE 28th International Requirements Engineering Conference (RE)},   title={Cutting through the Jungle: Disambiguating Model-based Traceability Terminology},   year={2020},  volume={},  number={},  pages={8-19},  abstract={Traceability, a classic requirements engineering topic, is increasingly used in the context of model-based engineering. However, researchers and practitioners lack a concise terminology to discuss aspects of requirements traceability in situations in which engineers heavily rely on models and model-based engineering. While others have previously surveyed the domain, no one has so far provided a clear, unambiguous set of terms that can be used to discuss traceability in such a context. We therefore set out to cut a path through the jungle of terminology for model-based traceability, ground it in established terminology from requirements engineering, and derive an unambiguous set of relevant terms. We also map the terminology used in existing primary and secondary studies to our taxonomy to show differences and commonalities. The contribution of this paper is thus a terminology for model-based traceability that allows requirements engineers and engineers working with models to unambiguously discuss their joint traceability efforts.},  keywords={Terminology;Unified modeling language;Taxonomy;Software;Analytical models;Requirements Traceability;Modelbased Engineering;Terminology},  doi={10.1109/RE48521.2020.00014},  ISSN={2332-6441},  month={Aug},}

@Misc{kerml,
title={Kernel Modeling Language ({KerML}), Version 1.0, Release 2021-04, Submitted in partial response to Systems Modeling Language ({SysML}®) v2 {RFP}},
author="Collegial industrial partners and Ed Seidewitz",
year=2021,
month="may"
}
@Misc{sysml,
title={OMG Systems Modeling Language TM ({SysML}®), Version 2.0, Release 2021-04, Submitted in response to Systems Modeling Language ({SysML}®) v2 {RFP}},
author="Collegial industrial partners and Ed Seidewitz",
year=2021,
month="may"
}

@Misc{deliverable2,
title="Second deliverable: Traceability language -- definition and editor",
author="Edouard R. Batot",
year=2020,
month="december"
}
@Misc{deliverable1,
title="First deliverable:  Survey of traceability techniques with a focus on their applications in AI-based software techniques",
author="Edouard R. Batot",
year=2020,
month="august"
}
@Misc{deliverable3,
title="Third deliverable:  Traceability solutions -- Evaluation and extension",
author="Edouard R. Batot",
year=2021,
month="april"
}


% Encoding: UTF-8
@Article{batot2020-survey-driven-feature-model,
  author   = {Edouard R. Batot and Sebastien Gerard and Jordi Cabot},
  journal  = {},
  title    = {A Survey-driven Feature Model for Software traceability},
  note = "(under review) https://github.com/ebatot/TraceaDSL/blob/main/batot2020\_SurveyDrivenFeatureModel.pdf",
  year     = {2020},
  issn     = {},
  month    = {},
  number   = {},
  pages    = {},
  volume   = {},
  abstract = {},
}
@Article{batot2021-not-another-metamodel,
  author   = {Edouard R. Batot and Sebastien Gerard and Jordi Cabot},
  journal  = {},
  title    = {({N}ot) Yet another metamodel for Software traceability},
  note = "(under review) ",
  year     = {2021},
  issn     = {},
  month    = {},
  number   = {},
  pages    = {},
  volume   = {},
  abstract = {},
}

@Article{jaber2013-effect-on-maintenance,
  author   = {K. {Jaber} and B. {Sharif} and C. {Liu}},
  journal  = {IEEE Access},
  title    = {A Study on the Effect of Traceability Links in Software Maintenance},
  year     = {2013},
  issn     = {2169-3536},
  pages    = {726-741},
  volume   = {1},
  abstract = {In software development, stakeholders of the same project often collaborate asynchronously through shared artifacts. A traceability system links a project's artifacts and therefore provides support for collaboration among stakeholders. Different stakeholders are interested in different types of traceability links. The literature often states that traceability is useful but expensive to build and maintain. However, there is no study showing reduction in effort when traceability links among various software artifacts are provided and used during the maintenance phase. This paper presents a study evaluating the benefits of using traceability among requirements, design, code, code inspections, builds, defects, and tests artifacts in the maintenance phase. Before the study, a survey was conducted at a large industrial firm to determine the type of links that different stakeholders are interested in. Twenty-five stakeholders from this firm participated in a survey to define the type of traceability links that were of interest to them. With this result, a traceability link model is proposed that categorizes different types of traceability links based on stakeholders' roles. This link model was used in the study. Twenty-eight subjects from industry and academia participated in the empirical study that was conducted after the survey. A prototype link-tracing tool, TraceLink, was developed and used in the study to present traceability links to the experimental group, whereas the control group was not given any links to solve the tasks. Five maintenance tasks were used in the study. The results show a significant improvement in task accuracy (86.06\%) when traceability links were given to the subjects. In conclusion, a traceability model based on an industrial survey provided traceability views that are based on stakeholders' roles. This empirical study provides evidence that traceability links are effective in solving maintenance tasks with higher accuracy.},
}

@Article{carleton2020-intersection-AI-and-SE,
  author   = {A. D. {Carleton} and E. {Harper} and T. {Menzies} and T. {Xie} and S. {Eldh} and M. R. {Lyu}},
  journal  = {IEEE Software},
  title    = {The AI Effect: Working at the Intersection of AI and SE},
  year     = {2020},
  issn     = {1937-4194},
  month    = {July},
  number   = {4},
  pages    = {26-35},
  volume   = {37},
  abstract = {This special issue explores the intersection of artificial intelligence (AI) and software engineering (SE), that is, what can AI do for SE, and how can we as software engineers design and build better AI systems?},
}

@inproceedings{maro2016_maintenance_factors_and_guidelines,
author = {Maro, Salome and Anjorin, Anthony and Wohlrab, Rebekka and Stegh\"{o}fer, Jan-Philipp},
title = {Traceability Maintenance: Factors and Guidelines},
year = {2016},
isbn = {9781450338455},
publisher = {Association for Computing Machinery},
abstract = { Traceability is an important concern for numerous software engineering activities. Establishing traceability links is a challenging and cost-intensive task, which is uneconomical without suitable strategies for maintaining high link quality. Current approaches to Traceability Management (TM), however, often make important assumptions and choices without ensuring that the consequences and implications for traceability maintenance are feasible and desirable in practice.  In this paper, therefore, we identify a set of core factors that influence how the quality of traceability links can be maintained. For each factor, we discuss relevant challenges and provide guidelines on how best to ensure viable traceability maintenance in a practical TM approach. Our guidelines are meant to be used by tool developers and users to select the most appropriate TM approach for their needs.  Our results are based on and supported by data collected from interviews conducted with: (i) 9 of our industrial and academic project partners to elicit requirements for a TM tool, and (ii) 24 software development stakeholders from 15 industrial cases to provide a broader overview of the current state of the practice on TM.  To evaluate the feasibility of our guidelines, we investigate a set of existing TM approaches used in industry with respect to our guidelines. },
booktitle = {Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering},
pages = {414–425},
numpages = {12},

series = {ASE 2016}
}

@Article{Haidrar_2018,
  author    = {Saida Haidrar and and Adil Anwar and Jean-Michel Bruel and Ounsa Roudies},
  journal   = {JSW},
  title     = {A Domain-Specific Language to manage Requirements Traceability},
  year      = {2018},
  month     = {sep},
  number    = {9},
  pages     = {460--480},
  volume    = {13},
  abstract  = {Tracing requirements  back  to  stakeholders  and  initial  documents  on  one  hand,  and  forward  to their  corresponding  designed  system  artifacts,  on  the  other  hand,  are  crucial  activities.  Requirements  are often expressed independently from those artifacts and can take several forms: texts or models. This makes hard and  tedious  the  inference  of  trace  links  between  requirements  and  artifacts.  This  paper  introduces ReqDL,  a  domain-specific  language  for  describing  requirements  and,  at  the  same  time,  capturing  bi-directional  traceability  data,  which  concerns  more  precisely  system  modeling  elements.  The  paper  also introduces  a  generation  algorithm basedon  ReqDL  specifications  in  order  to  automatically  generate independent  trace  models.  Indeed,  we  present  ReqDL  concrete  and  abstract  syntax  in  terms  of  grammar and   metamodel. Using   ReqDL   expressions,   we   aim   at   assisting   the   traceability informalizing   easily understandable  requirements  and  establishing  an  initial  relationship  between  requirements  and  other system artifacts. The main resultis the generation of requirements traces modelswhich incorporate explicit and  implicit  trace  links  between  requirements  and  design  elements.  Moreover,  we  provide  a  working example through which we demonstrate ReqDL practicality and usefulness.},
  groups    = {Metamodels, tmp},
  publisher = {International Academy Publishing ({IAP})},
}



@InProceedings{carniel2018-TIM-for-Impact-analysis-agile,
author="Carniel, Carlos Andrei
and Pegoraro, Raquel Aparecida",
editor="Santos, Viviane Almeida dos
and Pinto, Gustavo Henrique Lima
and Serra Seca Neto, Adolfo Gustavo",
title="Metamodel for Requirements Traceability and Impact Analysis on Agile Methods",
booktitle="Agile Methods",
year="2018",
publisher="Springer International Publishing",
pages="105--117",
abstract="Requirements traceability is a requirements management activity used to identify relations between requirements and to enable the comprehension of its dependencies. In the agile development changes are normal and occur at any moment in the project, requirements are written in the format of user stories which have dependencies between them. These dependencies can be technical or related to the business being developed. Handling dependencies among requirements and impact analysis is a challenge due to the possibility of refactoring and maintenance caused by not analyzed changes. This paper aims to propose a metamodel that enables requirements traceability and impact analysis in agile methods. The proposed metamodel presents the following contributions: enable traceability analysis through the mapping of dependencies between user stories; (b) allow identification of dependencies between user stories and between tasks; (c) management of the evolution of requirements; (d) support on impact analysis of changes.",

}

@InProceedings{dubois2010-TIM-for-Req-in-MD-Automotive,
  author    = {H. {Dubois} and M. {Peraldi-Frati} and F. {Lakhal}},
  booktitle = {2010 15th IEEE International Conference on Engineering of Complex Computer Systems},
  title     = {A Model for Requirements Traceability in a Heterogeneous Model-Based Design Process: Application to Automotive Embedded Systems},
  year      = {2010},
  month     = {March},
  pages     = {233-242},
  abstract  = {Requirements traceability modeling is a key issue in real-time embedded design process. In such systems, requirements are of different nature (software-related, system-related, functional or non functional) and must be traced through a multilevel design flow which integrates multiple tools and heterogeneous models. Validation and Verification (V&V) activities must be performed on models and on the final product to check whether they match the initial requirements. Results of design and V&V activities must be able to impact traceability information. We thus propose DARWIN4REQ, a metamodel for requirement traceability, based on three independent flows (requirement model, solution model and V&V model). The new metamodel establishes a link between these flows and affords full traceability of requirements, including those set for heterogeneous models. This paper presents the DARWIN4REQ metamodel and its use in the context of heterogeneous models for requirements modeling, design and V&V. An automotive application illustrates the proposed approach based on UML-profiles such that SYSML, EAST-ADL2 and MARTE for design and on SIMULINK, SyNDEx and TIMESQUARE for V&V activities.},
}

@InProceedings{mader2009-TIM-in-practice,
  author    = {P. {Mader} and O. {Gotel} and I. {Philippow}},
  booktitle = {2009 ICSE Workshop on Traceability in Emerging Forms of Software Engineering},
  title     = {Getting back to basics: Promoting the use of a traceability information model in practice},
  year      = {2009},
  pages     = {21-25},

  groups    = {metas},
}

@InProceedings{pavalkis2017-TIM-for-BPMN,
author="Pavalkis, Saulius
and Nemuraite, Lina
and Mileviciene, Edita",
editor="Skersys, Tomas
and Butleris, Rimantas 
and Nemuraite, Lina
and Suomi, Reima",
title="Towards Traceability Metamodel for Business Process Modeling Notation",
booktitle="Building the e-World Ecosystem",
year="2011",
publisher="Springer Berlin Heidelberg",
pages="177--188",
abstract="This paper presents the traceability metamodel for Business Process Model and Notation (BPMN) and its implementation in Cameo Business Modeler plug-in for MagicDraw. There is no public standard traceability metamodel defined for BPMN yet. We present solutions that we have already applied in practice: we improve the traceability of BPMN models by defining derived properties that are calculated by a modeling tool on the fly. In contrast to other existing solutions, this approach does not require additional efforts from users for defining and maintaining traceability, and does not overload projects with redundant information. Using this approach, CASE tool developers are able to supplement their tools with traceability analysis means allowing users to access traceability information easier, to check completeness and correctness of BPMN models, and to analyze the impact of changes.",

}

@InProceedings{kassab2008-TIM-for-non-func-req,
  author    = {M. {Kassab} and O. {Ormandjieva} and M. {Daneva}},
  booktitle = {2008 Sixth International Conference on Software Engineering Research, Management and Applications},
  title     = {A Traceability Metamodel for Change Management of Non-functional Requirements},
  year      = {2008},
  month     = {Aug},
  pages     = {245-254},
  abstract  = {Requirements changes are an issue in the software development life cycle which often originates from an incomplete knowledge of the domain of interest. Hardly any requirement manifests in isolation, and usually the provision of one requirement may affect the level of provision of another. Understanding the relations among system requirements is essential to ensuring their consistency and change management. In practice, many organizations either focus their traceability efforts on functional requirements (FRs) or else fail entirely to implement an effective traceability process. Tracing non-functional requirements (NFRs) has, by and large, been neglected. In this paper, we propose a metamodel which explicitly captures NFRs and their relations, and which is independent from any programming paradigm. In addition, we present an implementation using XML-based representations for the metamodel and XQuery queries to represent tracing information.},
}

@InProceedings{mustafa2015-TIM-for-heterogenous,
  author    = {N. {Mustafa} and Y. {Labiche}},
  booktitle = {2015 3rd International Conference on Model-Driven Engineering and Software Development (MODELSWARD)},
  title     = {Towards traceability modeling for the engineering of heterogeneous systems},
  year      = {2015},
  month     = {Feb},
  pages     = {321-328},
  abstract  = {Capturing traceability information among artifacts allows for assuring product quality in many ways such as tracking functional and non-functional requirements, performing system validation and impact analysis. Although literature provides many techniques to model traceability, existing solutions are either tailored to specific domains (e.g., Ecore modeling languages), or not complete enough (e.g., lack support to specify traceability link semantics). This paper examines the current traceability models and identifies the drawbacks that prevent from capturing some traceability information of heterogeneous artifacts. In this context, heterogeneous artifacts refer to artifacts that come from widely different modelling notations (e.g., UML, Simulink, natural language text, source code). Additionally, the paper proposes traceability model requirements that are necessary to build a generic traceability model. We argue that the proposed requirements are sufficient to build a traceability model oblivious of the heterogeneity of the models which elements need to be traced. We also argue that our proposed requirements can be adopted to create a generic traceability model that provides flexibility and can accommodate new ways of characterizing and imposing constraints on trace links or systems artifacts. The proposed requirements incorporate the ideas from many existing solutions in literature, in an attempt to be as complete as possible.},
  keywords  = {software engineering;heterogeneous systems;product quality;traceability link semantics;heterogeneous artifacts;generic traceability model;software artifacts;Decision support systems;Handheld computers;Unified modeling language;Heterogeneous;Traceability;Generic;Characterization;Traceability Requirements},
}


@InProceedings{mate2011-TIM-for-MDA-data-warehouses,
author="Mat{\'e}, Alejandro
and Trujillo, Juan",
editor="Mouratidis, Haralambos
and Rolland, Colette",
title="A Trace Metamodel Proposal Based on the Model Driven Architecture Framework for the Traceability of User Requirements in Data Warehouses",
booktitle="Advanced Information Systems Engineering",
year="2011",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="123--137",
abstract="The complexity of the Data Warehouse (DW) development process requires to follow a methodological approach in order to be successful. A widely accepted approach for this development is the hybrid one, in which requirements and data sources must be accommodated to a new DW model. The main problem is that we lose the relationships between requirements, elements in the conceptual models and data sources in the process, since no traceability is explicitly specified. Therefore, this hurts requirements validation capability and increases the complexity of Extraction, Transformation and Load processes. In this paper, we propose the first trace metamodel for DWs and focus on the relationships between requirements and conceptual models. We propose a set of Query/View/Transformation rules to include traceability in DWs in an automatic way, allowing us to trace every requirement to the conceptual model and further increasing user satisfaction.",

}

@InProceedings{taromirad2012-TIM-for-Agile-req,
  author    = {Taromirad, Masoumeh and Paige, Richard F.},
  booktitle = {Proceedings of the 2012 Extreme Modeling Workshop},
  title     = {Agile Requirements Traceability Using Domain-Specific Modelling Languages},
  year      = {2012},
  pages     = {45–50},
  publisher = {Association for Computing Machinery},
  series    = {XM '12},
  abstract  = {Requirements traceability is an important mechanism for managing verification, validation and change impact analysis challenges in system engineering. Numerous model-based approaches have been proposed to support requirements traceability, but significant challenges remain, including finding the appropriate level of granularity for modelling traceability and coping with the lack of uniformity in requirements management tools. This paper argues for an agile modelling approach to managing requirements traceability and, in this context, proposes a domain/project-specific requirements traceability modelling approach. The preliminary approach is illustrated briefly in the context of the safety-critical systems engineering domain, where agile traceability from functional and safety requirements is necessary to underpin certification.},

  numpages  = {6},

}

@InProceedings{szabo2013-TIM-for-multimodel-consistency,
  author    = {C. {Szabo} and Y. {Chen}},
  booktitle = {2013 22nd Australian Software Engineering Conference},
  title     = {A Model-Driven Approach for Ensuring Change Traceability and Multi-model Consistency},
  year      = {2013},
  month     = {June},
  pages     = {127-136},
  abstract  = {In model driven engineering, high-level models of an application are constructed to enable reasoning about functional and non-functional requirements independently of implementation issues and concerns. This allows for reduced maintenance, shortens development time, and permits automated model updates, system model executions, and impact assessment. Part of model driven engineering, multi-modeling integrates models that abstract various aspects of the system, such as I/O, behavioral, and functional among others, at different levels of granularity and using various domain specific modeling languages. An important challenge is to understand the relationship between these models towards preserving multi-model consistency as changes in one model affect other models in the multi-model. This paper presents a multi-modeling architecture that captures model relationships at syntactic and semantic levels. We define a taxonomy of change effects that relies on a relationship correspondence meta-model to highlight and trace the impact of changes across various modeling environments. Following the correspondence meta-model and associated change effects, our prototype implementation ensures that multi-model consistency is met and notifies stakeholders of significant changes. Our case study of a submarine tracking system checks multi model consistency and highlights the impact of changes across system modeling tools that capture its functional and behavioral aspects among others. Our experiments show the feasibility of our approach while highlighting important challenges.},

 
}

@InProceedings{sannier2012-TIM-for-text-req-in-MDE,
  author    = {N. {Sannier} and B. {Baudry}},
  booktitle = {2012 Second IEEE International Workshop on Model-Driven Requirements Engineering (MoDRE)},
  title     = {Toward multilevel textual requirements traceability using model-driven engineering and information retrieval},
  year      = {2012},
  month     = {Sep.},
  pages     = {29-38},
  abstract  = {In complex industrial projects, textual information remains the main vector of information at the project level. Consequently, requirements are scattered throughout multiple documents expressing different levels of requirements and different kinds of requirements. Formalizing this information and tracing different relationships among documents and organizing this environment present a challenging question. Domain-specific modeling and traceability modeling are Model-Driven Engineering (MDE) techniques that could address various aspects of requirements formalization. Text-based high level requirements can be formalized as document concepts can be gathered and represented. Still, relationships cannot always be determined using sole MDE approaches and, as a consequence, relationships and traceability issue remains. Information retrieval (IR) approaches have already proved to work in an efficient way on large text corpora for requirements traceability analysis but do only consider similarity aspects of flatten documents, losing their organization and hierarchy. This paper aims to introduce how a combined use of both MDE and IR can lead to improved requirements organization and traceability while handling textual ambiguous requirements documents.},

 
}

@InProceedings{yrjonen2010-TIM-for-NonFunc-in-MDE,
  author    = {Yrj\"{o}nen, Anton and Merilinna, Janne},
  booktitle = {Proceedings of the 6th ECMFA Traceability Workshop},
  title     = {Tooling for the Full Traceability of Non-Functional Requirements within Model-Driven Development},
  year      = {2010},

  pages     = {15–22},
  publisher = {Association for Computing Machinery},
  series    = {ECMFA-TW '10},
  abstract  = {There is an ever-increasing need to rapidly deliver products, whilst, at the same time, also delivering products of high quality. To improve the quality of products and increase productivity within software development processes, all phases of the development process must fit together well. While defining requirements for the system, it must be ensured that the correct requirements are defined as well as ensure that they can be translated into a design fulfilling the requirements. The earlier the correct requirements are found, the easier and cheaper it will be to design good products. Finally, the design must be verified against the correct requirements. To realize this, requirements traceability is of extreme importance for development processes. The non-functional requirements (NFR) are particularly important and difficult. In this paper, we will report on an integrated tooling solution for a Domain-Specific Modelling approach that enables and guides towards defining accurate and non-conflicting requirements. Additionally, the solution enables a full bidirectional traceability from the requirements to models to the implementation, and offers an up-to-date overall view of the state of the requirements within the product.},

  keywords  = {domain-specific modelling},
  numpages  = {8},

}

@Article{wang2020-TIM-for-NL-to-AADL,
  author   = {F. {Wang} and Z. {Yang} and Z. {Huang} and C. {Liu} and Y. {Zhou} and J. {Bodeveix} and M. {Filali}},
  journal  = {IEEE Transactions on Reliability},
  title    = {An Approach to Generate the Traceability Between Restricted Natural Language Requirements and AADL Models},
  year     = {2020},
  issn     = {1558-1721},
  number   = {1},
  pages    = {154-173},
  volume   = {69},
  abstract = {Requirements traceability is broadly recognized as a critical element of any rigorous software development process, especially for building safety-critical software (SCS) systems. Model-driven development (MDD) is increasingly used to develop SCS in many domains, such as automotive and aerospace. MDD provides new opportunities for establishing traceability links through modeling and model transformations. Architecture Analysis and Design Language (AADL) is a standardized architecture description language for embedded systems, which is widely used in avionics and aerospace industries to model safety-critical applications. However, there is a big challenge to automatically establish the traceability links between requirements and AADL models in the context of MDD, because requirements are mostly written as free natural language texts, which are often ambiguous and difficult to be processed automatically. To bridge the gap between natural language requirements (NLRs) and AADL models, we propose an approach to generate the traceability links between NLRs and AADL models. First, we propose a requirement modeling method based on the restricted natural language, which is named as RM-RNL. The RM-RNL can eliminate the ambiguity of NLRs and barely change engineers' habits of requirement specification. Second, we present a method to automatically generate the initial AADL models from the RM-RNLs and to automatically establish traceability links between the elements of the RM-RNL and the generated AADL models. Third, we refine the initial AADL models through patterns to achieve the change of requirements and traceability links. Finally, we demonstrate the effectiveness of our approach with industrial case studies and evaluation experiments.},


}

@InProceedings{levendovsky2010-TIM-for-MT,
  author    = {Levendovszky, Tihamer and Balasubramanian, Daniel and Smyth, Kevin and Shi, Feng and Karsai, Gabor},
  booktitle = {Proceedings of the 6th ECMFA Traceability Workshop},
  title     = {A Transformation Instance-Based Approach to Traceability},
  year      = {2010},

  pages     = {55–60},
  publisher = {Association for Computing Machinery},
  series    = {ECMFA-TW '10},
  abstract  = {Although traceability is often a suggested requirement for general software development, there are areas such as airborne systems, where traceability is a compulsory part of the development process. This paper describes a tool chain that is able to generate and to follow traceability links across model-to-model and model-to-code transformations, and capable of providing navigability support along these traceability links. We elaborate on the conceptual design of our tool chain and provide details on its realization in a DSML environment underpinned by graph rewriting-based model transformation.},


  keywords  = {traceability, model transformation},
   numpages  = {6},

}

@Article{Goknil2011-consistency-checking-and-inferencing,
  author   = {Goknil, Arda and Kurtev, Ivan and van den Berg, Klaas and Veldhuis, Jan-Willem},
  journal  = {Software \& Systems Modeling},
  title    = {Semantics of trace relations in requirements models for consistency checking and inferencing},
  year     = {2011},
  issn     = {1619-1374},
  number   = {1},
  pages    = {31--54},
  volume   = {10},
  abstract = {Requirements traceability is the ability to relate requirements back to stakeholders and forward to corresponding design artifacts, code, and test cases. Although considerable research has been devoted to relating requirements in both forward and backward directions, less attention has been paid to relating requirements with other requirements. Relations between requirements influence a number of activities during software development such as consistency checking and change management. In most approaches and tools, there is a lack of precise definition of requirements relations. In this respect, deficient results may be produced. In this paper, we aim at formal definitions of the relation types in order to enable reasoning about requirements relations. We give a requirements metamodel with commonly used relation types. The semantics of the relations is provided with a formalization in first-order logic. We use the formalization for consistency checking of relations and for inferring new relations. A tool has been built to support both reasoning activities. We illustrate our approach in an example which shows that the formal semantics of relation types enables new relations to be inferred and contradicting relations in requirements documents to be determined. The application of requirements reasoning based on formal semantics resolves many of the deficiencies observed in other approaches. Our tool supports better understanding of dependencies between requirements.},


}

@InProceedings{goknil2008-metamodel-for-reasoning,
  author    = {Goknil, Arda and Kurtev, Ivan and van den Berg, Klaas},
  booktitle = {Model Driven Architecture -- Foundations and Applications},
  title     = {A Metamodeling Approach for Reasoning about Requirements},
  year      = {2008},
  address   = {Berlin, Heidelberg},
  editor    = {Schieferdecker, Ina and Hartman, Alan},
  pages     = {310--325},
  publisher = {Springer Berlin Heidelberg},
  abstract  = {In requirements engineering, there are several approaches for requirements modeling such as goal-oriented, aspect-driven, and system requirements modeling. In practice, companies often customize a given approach to their specific needs. Thus, we seek a solution that allows customization in a systematic way. In this paper, we propose a metamodel for requirements models (called coremetamodel) and an approach for customizing this metamodel in order to support various requirements modeling approaches. The core metamodel represents the common concepts extracted from some prevalent approaches. We define the semantics of the concepts and the relations in the core metamodel. Based on this formalization, we can perform reasoning on requirements that may detect implicit relations and inconsistencies. Our approach for customization keeps the semantics of the core concepts intact and thus allows reuse of tools and reasoning over the customized metamodel. We illustrate the customization of our core metamodel with SysML coAncepts. As a case study, we apply the reasoning on requirements of an industrial mobile service application based on this customized core requirements metamodel.},

}



@Article{sanchez2011-TIM-for-safety-req-in-md-robotic,
  author    = {Pedro Sanchez and Diego Alonso and Francisca Rosique and Barbara Alvarez and Juan A. Pastor},
  journal   = {{IEEE Trans. Comput.} Transactions on Computers},
  title     = {Introducing Safety Requirements Traceability Support in Model-Driven Development of Robotic Applications},
  year      = {2011},
  month     = {aug},
  number    = {8},
  pages     = {1059--1071},
  volume    = {60},
  abstract  = {Requirements traceability is a technique intended to help determine the impact of changes in software design, support their integration, preserve knowledge, and assure the quality and correctness of the overall system. This paper presents an approach that considers traceability of safety requirements in the context of model-driven development of teleoperated services robots. The combination of the model-driven approach with safety requirements traceability makes it possible to construct systems using techniques for automatically identifying, managing, and mitigating risks so that these systems are safe enough to work in a particular environment. To secure the advantages of these mechanisms, we have developed a tool that provides users with traceability reports after applying model transformations. These reports enable developers to determine whether or not all safety requirements have been considered, the impact of changing a safety requirement, and how they are considered both in architectural decisions and code implementations.},
  groups    = {Metamodels, tmp, mde},
  publisher = {Institute of Electrical and Electronics Engineers ({IEEE})},
}

@Comment{jabref-meta: databaseType:bibtex;}

@Comment{jabref-meta: grouping:
0 AllEntriesGroup:;
1 StaticGroup:metas\;0\;1\;0x8a8a8aff\;\;\;;
}
