/**
 * generated by Xtext 2.21.0
 */
package uoc.som.tracea.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import tracea.Tracea;
import tracea.core.Trace;
import uoc.som.tracea.services.TraceaGrammarAccess;

@SuppressWarnings("all")
public class TraceaFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private TraceaGrammarAccess _traceaGrammarAccess;
  
  protected void _format(final Tracea tracea, @Extension final IFormattableDocument document) {
    EList _traces = tracea.getTraces();
    for (final Object trace : _traces) {
      document.<Object>format(trace);
    }
  }
  
  protected void _format(final Trace trace, @Extension final IFormattableDocument document) {
    EList _tracelinks = trace.getTracelinks();
    for (final Object traceLink : _tracelinks) {
      document.<Object>format(traceLink);
    }
  }
  
  public void format(final Object trace, final IFormattableDocument document) {
    if (trace instanceof XtextResource) {
      _format((XtextResource)trace, document);
      return;
    } else if (trace instanceof Trace) {
      _format((Trace)trace, document);
      return;
    } else if (trace instanceof Tracea) {
      _format((Tracea)trace, document);
      return;
    } else if (trace instanceof EObject) {
      _format((EObject)trace, document);
      return;
    } else if (trace == null) {
      _format((Void)null, document);
      return;
    } else if (trace != null) {
      _format(trace, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(trace, document).toString());
    }
  }
}
