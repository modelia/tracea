% Encoding: UTF-8


@InProceedings{Bouzidi_2020,
  author    = {Aljia Bouzidi and Nahla Haddar and Mounira Ben-Abdallah and Kais Haddar},
  booktitle = {Proceedings of the 15th International Conference on Evaluation of Novel Approaches to Software Engineering},
  title     = {From {BPMN} to Sequence Diagrams: Transformation and Traceability},
  year      = {2020},
  publisher = {{SCITEPRESS} - Science and Technology Publications},
  abstract  = {A business cannot be competitive unless its business process is aligned with its information system. Indeed, a perfect alignment is key to a coherent management and success of the business. Therefore, it is important to bring closer business process- and IS modeling activities. The current paper presents an approach to derive a dynamic software model from a business process model, including the trace links between source and target elements. Our approach is based on a set of rules that transform a BPMN business process model into a UML sequence diagram structured according to the model view controller design pattern, and a trace model. To show the feasibility of approach in the practice, we developed a tool that implements the transformation rules.},
  doi       = {10.5220/0009418104380445},
  groups    = {MT, tmp},
}

@Article{Wang_2020,
  author    = {Fei Wang and Zhi-Bin Yang and Zhi-Qiu Huang and Cheng-Wei Liu and Yong Zhou and Jean-Paul Bodeveix and Mamoun Filali},
  journal   = {{IEEE Trans. Rel.} Transactions on Reliability},
  title     = {An Approach to Generate the Traceability Between Restricted Natural Language Requirements and {AADL} Models},
  year      = {2020},
  month     = {mar},
  number    = {1},
  pages     = {154--173},
  volume    = {69},
  abstract  = {Requirements traceability is broadly recognized as a critical element of any rigorous software development process, especially for building safety-critical software (SCS) systems. Model-driven development (MDD) is increasingly used to develop SCS in many domains, such as automotive and aerospace. MDD provides new opportunities for establishing traceability links through modeling and model transformations. Architecture Analysis and Design Language (AADL) is a standardized architecture description language for embedded systems, which is widely used in avionics and aerospace industries to model safety-critical applications. However, there is a big challenge to automatically establish the traceability links between requirements and AADL models in the context of MDD, because requirements are mostly written as free natural language texts, which are often ambiguous and difficult to be processed automatically. To bridge the gap between natural language requirements (NLRs) and AADL models, we propose an approach to generate the traceability links between NLRs and AADL models. First, we propose a requirement modeling method based on the restricted natural language, which is named as RM-RNL. The RM-RNL can eliminate the ambiguity of NLRs and barely change engineers' habits of requirement specification. Second, we present a method to automatically generate the initial AADL models from the RM-RNLs and to automatically establish traceability links between the elements of the RM-RNL and the generated AADL models. Third, we refine the initial AADL models through patterns to achieve the change of requirements and traceability links. Finally, we demonstrate the effectiveness of our approach with industrial case studies and evaluation experiments.},
  doi       = {10.1109/tr.2019.2936072},
  groups    = {Concrete applications, Metamodels, tmp, mde},
  publisher = {Institute of Electrical and Electronics Engineers ({IEEE})},
}

@InProceedings{Gonzalez_2019,
  author    = {Daniel Gonzalez and Libertad Tansini},
  booktitle = {2019 {XLV} Latin American Computing Conference ({CLEI})},
  title     = {Modelling Traceability in Recommender Systems},
  year      = {2019},
  month     = {sep},
  publisher = {{IEEE}},
  abstract  = {Recommender  Systems are  valuable  tools  which suggestmeaningful  and  useful  items  to  users.In  a  previous research   project,   a   real   recommender   system   which   offers personalized  recommendations  of itemsto  health  professionals and  medical  specialists  in  the  context  of  Continuing  Medical Education (CME)was designed and developed.Traceability helps recommender systems to generate justifications about the criteria used forselectingthe suggestions of itemsto the active user. This paper  presents  a  novel  approach  for  modelling  traceability  inrecommender   systems   in   the   given   context. The   proposed approach   shows  how   to   use   different   levels   of   relationships between  users  to  trace  the  origin  of  the  recommendations. An important  contribution  of  this  research is  to  explain how  to generalize  the  proposed  model  of  traceability  in  recommender systems. In    addition,    an    automated    approach    towards communicating the origin of the recommendations to the users is proposed.},
  doi       = {10.1109/clei47609.2019.235091},
}

@InProceedings{Arcelli_2019,
  author    = {Davide Arcelli and Vittorio Cortellessa and Daniele Di Pompeo and Romina Eramo and Michele Tucci},
  booktitle = {2019 {IEEE} International Conference on Software Architecture ({ICSA})},
  title     = {Exploiting Architecture/Runtime Model-Driven Traceability for Performance Improvement},
  year      = {2019},
  month     = {mar},
  publisher = {{IEEE}},
  abstract  = {Model-Driven Engineering techniques may achieve a major support to the software development when they allow to manage relationships between a running system and its architectural model. These relationships can be exploited for different goals, such as the software evolution due to new functional requirements. In this paper, we define and use relationships that work as support to the performance improvement of a running system. In particular, we combine: (i) a bidirectional model transformation framework tailored to define relationships between performance monitoring data and an architectural model, with (ii) a technique for detecting performance antipatterns and for suggesting architectural changes, aimed at removing performance problems identified on the basis of runtime information. The result is an integrated approach that exploits traceability relationships between the monitoring data and the architectural model to derive recommended refactoring solutions for the system performance improvement. The approach has been applied to an e-commerce application based on microservices that has been designed by means of UML software models profiled with MARTE.},
  doi       = {10.1109/icsa.2019.00017},
  groups    = {tmp},
 }

@InProceedings{Markovic_2019,
  author    = {Milan Markovic and Daniel Garijo and Peter Edwards and Wamberto Vasconcelos},
  booktitle = {2019 Sixth International Conference on Internet of Things: Systems, Management and Security ({IOTSMS})},
  title     = {Semantic Modelling of Plans and Execution Traces for Enhancing Transparency of {IoT} Systems},
  year      = {2019},
  month     = {oct},
  publisher = {{IEEE}},
  abstract  = {Transparency of IoT systems is an essential requirement for enhancing user's trust towards such systems. Provenance mechanisms documenting the execution of IoT systems are often cited as an enabler of such transparency. However, provenance records often lack detailed descriptions of a system's expected behaviour. Plan specifications describe the steps needed to achieve a certain goal by a human or an automated system. Once plans reach a certain level of complexity, they are typically decomposed in different levels of abstraction. However, this decomposition makes it difficult to relate high level abstract plans to their granular execution traces. This paper introduces EP-Plan, a vocabulary for linking the different levels of granularity of a plan with their respective provenance traces. EP-Plan also provides the means to describe plan metadata such as constraints, policies, rationales, and expected participating agents associated with a plan.},
  doi       = {10.1109/iotsms48152.2019.8939260},
  groups    = {Metamodels},
}

@Article{Guana_2017,
  author    = {Victor Guana and Eleni Stroulia},
  journal   = {{Softw Syst Model} Systems Modeling},
  title     = {End-to-end model-transformation comprehension through fine-grained traceability information},
  year      = {2017},
  month     = {jun},
  number    = {2},
  pages     = {1305--1344},
  volume    = {18},
  abstract  = {The construction and maintenance of model-to-model and model-to-text transformations pose numerous challenges to novice and expert developers. A key challenge involves tracing dependency relationships between artifacts of a transformation ecosystem. This is required to assess the impact of metamodel evolution, to determine metamodel coverage, and to debug complex transformation expressions. This paper presents an empirical study that investigates the performance of developers reflecting on the execution semantics of model-to-model and model-to-text transformations. We measured the accuracy and efficiency of 25 developers completing a variety of traceability-driven tasks in two model-based code generators. We compared the performance of developers using ChainTracker, a traceability analysis environment developed by our team, and that of developers using Eclipse Modeling. We present statistically significant evidence that ChainTracker improves the performance of developers reflecting on the execution semantics of transformation ecosystems. We discuss how developers supported by off-the-shelf development environments are unable to effectively identify dependency relationships in nontrivial model-transformation chains.},
  doi       = {10.1007/s10270-017-0602-0},
  groups    = {MT, tmp, mde},
  publisher = {Springer Science and Business Media {LLC}},
}

@Article{Haidrar_2018,
  author    = {Saida Haidrar and and Adil Anwar and Jean-Michel Bruel and Ounsa Roudies},
  journal   = {JSW},
  title     = {A Domain-Specific Language to manage Requirements Traceability},
  year      = {2018},
  month     = {sep},
  number    = {9},
  pages     = {460--480},
  volume    = {13},
  abstract  = {Tracing requirements  back  to  stakeholders  and  initial  documents  on  one  hand,  and  forward  to their  corresponding  designed  system  artifacts,  on  the  other  hand,  are  crucial  activities.  Requirements  are often expressed independently from those artifacts and can take several forms: texts or models. This makes hard and  tedious  the  inference  of  trace  links  between  requirements  and  artifacts.  This  paper  introduces ReqDL,  a  domain-specific  language  for  describing  requirements  and,  at  the  same  time,  capturing  bi-directional  traceability  data,  which  concerns  more  precisely  system  modeling  elements.  The  paper  also introduces  a  generation  algorithm basedon  ReqDL  specifications  in  order  to  automatically  generate independent  trace  models.  Indeed,  we  present  ReqDL  concrete  and  abstract  syntax  in  terms  of  grammar and   metamodel. Using   ReqDL   expressions,   we   aim   at   assisting   the   traceability informalizing   easily understandable  requirements  and  establishing  an  initial  relationship  between  requirements  and  other system artifacts. The main resultis the generation of requirements traces modelswhich incorporate explicit and  implicit  trace  links  between  requirements  and  design  elements.  Moreover,  we  provide  a  working example through which we demonstrate ReqDL practicality and usefulness.},
  doi       = {10.17706/jsw.13.9.460-480},
  groups    = {Metamodels, tmp},
  publisher = {International Academy Publishing ({IAP})},
}

@InCollection{Diskin_2017,
  author    = {Zinovy Diskin and Abel G{\'{o}}mez and Jordi Cabot},
  booktitle = {Fundamental Approaches to Software Engineering},
  publisher = {Springer Berlin Heidelberg},
  title     = {Traceability Mappings as a Fundamental Instrument in Model Transformations},
  year      = {2017},
  pages     = {247--263},
  abstract  = {Technological importance of traceability mappings for model transformations is well-known, but they have often been considered as an auxiliary element generated during the transformation execution and providing accessory information. This paper argues that traceability mappings should instead be regarded as a core aspect of the transformation definition, and a key instrument in the transformation management.

We will show how a transformation can be represented as the result of execution of a metamodel mapping, which acts as a special encoding of the transformation definition. Since mappings enjoy Boolean operations (as sets of links) and sequential composition (as sets of directed links), encoding transformations by mappings makes it possible to define these operations for transformations as well, which can be useful for model transformation reuse, compositional design, and chaining.},
  comment   = {Technological importance of traceability mappings for model transformations is well-known, but they have often been considered as an auxiliary element generated during the transformation execution and providing accessory information. This paper argues that traceability mappings should instead be regarded as a core aspect of the transformation definition, and a key instrument in the transformation management.

We will show how a transformation can be represented as the result of execution of a metamodel mapping, which acts as a special encoding of the transformation definition. Since mappings enjoy Boolean operations (as sets of links) and sequential composition (as sets of directed links), encoding transformations by mappings makes it possible to define these operations for transformations as well, which can be useful for model transformation reuse, compositional design, and chaining.},
  doi       = {10.1007/978-3-662-54494-5_14},
  groups    = {MT, tmp, mde, Metastudies},
}

@InCollection{Filax_2017,
  author    = {Marco Filax and Tim Gonschorek and Frank Ortmeier},
  booktitle = {Model-Based Safety and Assessment},
  publisher = {Springer International Publishing},
  title     = {Building Models We Can Rely On: Requirements Traceability for Model-Based Verification Techniques},
  year      = {2017},
  pages     = {3--18},
  abstract  = {Proving the safety of a critical system is a complex and complicated task. Model-based formal verification techniques can help to verify a System Requirement Specification (SRS) with respect to normative and safety requirements. Due to an early application of these methods, it is possible to reduce the risk of high costs caused by unexpected, late system adjustments. Nevertheless, they are still rarely used. One reason among others is the lack of an applicable integration method in an existing development process.

In this paper, we propose a process to integrate formal model-based verification techniques into the development life-cycle of a safety critical system. The core idea is to systematically refine informal specifications by (1) categorization, (2) structural refinement, (3) expected behavioral refinement, and finally, (4) operational semantics. To support modeling, traceability is upheld through all refinement steps and a number of consistency checks are introduced.

The proposed process has been jointly developed with the German Railroad Authority (EBA) and an accredited safety assessor. We implemented an Eclipse-based IDE with connections to requirement and systems engineering tools as well as various verification engines. The applicability of our approach is demonstrated via an industrial-sized case study in the context of the European Train Control System with ETCS Level 1 Full Supervision.},
  doi       = {10.1007/978-3-319-64119-5_1},
  groups    = {Concrete applications, tmp, mde},
}

@InProceedings{Bunder_2017_query-for-quality,
  author    = {Hendrik Bünder and Christoph Rieger and Herbert Kuchen},
  booktitle = {Proceedings of the 5th International Conference on Model-Driven Engineering and Software Development},
  title     = {A Domain-specific Language for Configurable Traceability Analysis},
  year      = {2017},
  publisher = {{SCITEPRESS} - Science and Technology Publications},
  abstract  = {In safety-critical industries such as the aviation industry or the medical industry traceability is required by law and specific regulations. In addition, process models such as CMMI require traceability information for documentation purposes. Although creating and maintaing so-called traceability information models (TIM) takes a lot of effort, its potential for reporting development progress, supporting project management, and measuring software quality often remains untapped. The domain-specific language presented in this paper builds on an existing traceability solution and allows to define queries, metrics, and rules for company- or project-specific usage. The basis for such an analysis is a query expression to retrieve information from a TIM. Customizable metrics are then defined to compute aggregated values, which are evaluated against company- or project-specific thresholds using the rules part of the domain-specific language. The focus of this paper is to show how the combination of query, metric, and rule expressions is used to define and compute customizable analyses based on individual requirements.},
  doi       = {10.5220/0006138503740381},
  groups    = {Metamodels, tmp, Trace analysis, Trace integrity},
  url       = {https://doi.org/10.5220%2F0006138503740381},
}

@Article{Buchmann_2015,
  author    = {Robert Andrei Buchmann and Dimitris Karagiannis},
  journal   = {Requirements Eng},
  title     = {Modelling mobile app requirements for semantic traceability},
  year      = {2015},
  month     = {jul},
  number    = {1},
  pages     = {41--75},
  volume    = {22},
  abstract  = {The paper presents a modelling method aimed to support the definition and elicitation of requirements for mobile apps through an approach that enables semantic traceability for the requirements representation. Business process-centricity is employed in order to capture requirements in a knowledge structure that retains procedural knowledge from stakeholders and can be traversed by semantic queries in order to trace domain-specific contextual information for the modelled requirements. Consequently, instead of having requirements represented as natural language items that are documented by diagrammatic models, the communication channels are switched: semantically interlinked conceptual models become the requirements representation, while free text can be used for requirements annotations/metadata. Thus, the method establishes a knowledge externalization channel between business stakeholders and app developers, also tackling the Twin Peaks bridging challenge (between requirements and early designs). The method is presented using its modelling procedure as a guiding thread, with each step illustrated by case-based samples of the modelling language and auxiliary functionality. The design work is encompassed by an existing metamodelling framework and introduces a taxonomy for modelling relations, since the metamodel is the key enabler for the goal of semantic traceability. The research was driven by the ComVantage EU research project, concerned with mobile app support for collaborative business process execution. Therefore, the project provides context for the illustrating examples; however, generalization possibilities beyond the project scope will also be discussed, with respect to both motivation and outcome.},
  doi       = {10.1007/s00766-015-0235-1},
  groups    = {Metamodels, tmp},
  publisher = {Springer Science and Business Media {LLC}},
  url       = {https://doi.org/10.1007%2Fs00766-015-0235-1},
}

@InCollection{la_Fosse_2018,
  author    = {Thibault B{\'{e}}ziers la Fosse and Massimo Tisi and Jean-Marie Mottu},
  booktitle = {Software Technologies: Applications and Foundations},
  publisher = {Springer International Publishing},
  title     = {Injecting Execution Traces into a Model-Driven Framework for Program Analysis},
  year      = {2018},
  pages     = {3--13},
  abstract  = {Model-Driven Engineering (MDE) has been successfully used in static program analysis. Frameworks like MoDisco inject the program structure into a model, available for further processing by query and transformation tools, e.g., for program understanding, reverse-engineering, modernization. In this paper we present our first steps towards extending MoDisco with capabilities for dynamic program analysis.

We build an injector for program execution traces, one of the basic blocks of dynamic analysis. Our injector automatically instruments the code, executes it and captures a model of the execution behavior of the program, coupled with the model of the program structure. We use the trace injection mechanism for model-driven impact analysis on test sets. We identify some scalability issues that remain to be solved, providing a case study for future efforts in improving performance of model-management tools.},
  doi       = {10.1007/978-3-319-74730-9_1},
  groups    = {tmp, mde},
  url       = {https://doi.org/10.1007%2F978-3-319-74730-9_1},
}

@InProceedings{Kr_mer_2016,
  author    = {Jan-Peter Krämer and Joel Brandt and Jan Borchers},
  booktitle = {Proceedings of the 2016 {CHI} Conference on Human Factors in Computing Systems},
  title     = {Using Runtime Traces to Improve Documentation and Unit Test Authoring for Dynamic Languages},
  year      = {2016},
  month     = {may},
  publisher = {{ACM}},
  abstract  = {Documentation and unit tests increase software maintainability, but real world software projects rarely have adequate coverage. We hypothesize that, in part, this is because existing authoring tools require developers to adjust their workflows significantly. To study whether improved interaction design could affect unit testing and documentation practice, we created an authoring support tool called Vesta. The main insight guiding Vesta's interaction design is that developers frequently manually test the software they are building. We propose leveraging runtime information from these manual executions. Because developers naturally exercise the part of the code on which they are currently working, this information will be highly relevant to appropriate documentation and testing tasks. In a complex coding task, nearly all documentation created using Vesta was accurate, compared to only 60% of documentation created without Vesta, and Vesta was able to generate significant portions of all tests, even those written manually by developers without Vesta.},
  doi       = {10.1145/2858036.2858311},
  groups    = {tmp},
  url       = {https://doi.org/10.1145%2F2858036.2858311},
}

@InProceedings{Haidrar_2016,
  author    = {Saida Haidrar and Adil Anwar and Ounsa Roudies},
  booktitle = {2016 4th {IEEE} International Colloquium on Information Science and Technology ({CiSt})},
  title     = {Towards a generic framework for requirements traceability management for {SysML} language},
  year      = {2016},
  month     = {oct},
  publisher = {{IEEE}},
  abstract  = {Requirements traceability provides support to check that the final system meets stakeholders' requirements. Although the important role of requirements traceability is widely recognized, the application of traceability methods remains limited and varies from one development team to another. In this work, we aim at providing a common approach for requirements traceability in case of complex system development. A generic framework has been devised to manage requirement traceability along system development process. We propose a metamodel in order to define trace models and give a representation for all system artifacts and trace links. We have then included a Trace generation activity based on an algorithm to automate the trace models extraction. We use a Temperature Control System in order to apply our traceability framework.},
  doi       = {10.1109/cist.2016.7805044},
  groups    = {Metamodels, tmp},
  url       = {https://doi.org/10.1109%2Fcist.2016.7805044},
}

@Article{Cazzola_2016,
  author    = {Walter Cazzola and Paola Giannini and Albert Shaqiri},
  journal   = {Electronic Notes in Theoretical Computer Science},
  title     = {Formal Attributes Traceability in Modular Language Development Frameworks},
  year      = {2016},
  month     = {apr},
  pages     = {119--134},
  volume    = {322},
  abstract  = {Modularization and component reuse are concepts that can speed up the design and implementation of domain specific languages. Several modular development frameworks have been developed that rely on attributes to share information among components. Unfortunately, modularization also fosters development in isolation and attributes could be undefined or used inconsistently due to a lack of coordination. This work presents 1) a type system that permits to trace attributes and statically validate the composition against attributes lack or misuse and 2) a correct and complete type inference algorithm for this type system. The type system and inference are based on the Neverlang development framework but it is also discussed how it can be used with different frameworks.},
  doi       = {10.1016/j.entcs.2016.03.009},
  groups    = {Concrete applications, tmp},
  publisher = {Elsevier {BV}},
  url       = {https://doi.org/10.1016%2Fj.entcs.2016.03.009},
}

@InProceedings{Faddegon_2016,
  author    = {Maarten Faddegon and Olaf Chitil},
  booktitle = {Proceedings of the 37th {ACM} {SIGPLAN} Conference on Programming Language Design and Implementation - {PLDI} 2016},
  title     = {Lightweight computation tree tracing for lazy functional languages},
  year      = {2016},
  publisher = {{ACM} Press},
  abstract  = {A computation tree of a program execution describes computations of functions and their dependencies. A computation tree describes how a program works and is at the heart of algorithmic debugging. To generate a computation tree, existing algorithmic debuggers either use a complex implementation or yield a less informative approximation. We present a method for lazy functional languages that requires only a simple tracing library to generate a detailed computation tree. With our algorithmic debugger a programmer can debug any Haskell program by only importing our library and annotating suspected functions.},
  comment   = {debug},
  doi       = {10.1145/2908080.2908104},
  groups    = {tmp},
  url       = {https://doi.org/10.1145%2F2908080.2908104},
}

@InProceedings{Mani_2016,
  author    = {Nariman Mani and Dorina Petriu and Murray Woodside},
  booktitle = {Proceedings of the 28th International Conference on Software Engineering and Knowledge Engineering},
  title     = {Cross-Model Traceability for Coupled Transformation of Software and Performance Models},
  year      = {2016},
  month     = {jul},
  publisher = {{KSI} Research Inc. and Knowledge Systems Institute Graduate School},
  abstract  = {In Model Driven Engineering, the relationship between a source and target model can be maintained, when the source model undergoes changes, by a coupled transformation, whereby changes applied to the source model are incrementally propagated to the target model. Cross-model traceability links are key to applying the correct changes to the target model. The coupled transformation considered in this paper propagates changes to a Layered Queueing Network (LQN) performance model (originally derived from a UML design model of a SOA system) as an effect of applying design patterns to the SOA model. A special problem arises because of differences in the level of abstraction between UML and LQN (i.e. a performance model element may represent a set of many design model elements). This paper bridges the abstraction gap between models by proposing traceability links that use new collection types (not defined in the source metamodel) to represent complex source model elements,},
  doi       = {10.18293/seke2016-142},
  groups    = {Coevolution, tmp, mde},
  url       = {https://doi.org/10.18293%2Fseke2016-142},
}

@Article{Lee_2016,
  author    = {Jihyun Lee and Sunmyung Hwang},
  journal   = {Wireless Pers Commun},
  title     = {Variability Change Management Using the Orthogonal Variability Model-Based Traceability},
  year      = {2016},
  month     = {jan},
  number    = {3},
  pages     = {729--745},
  volume    = {89},
  abstract  = {Variability is the ability of a software system or artifacts to be changed, customized, or configured for reuse in the product members of a software product line. As the amount of variability increases in software product lines the complexity of managing changes and evolutions of such variability becomes a main concern these days. In this context a high-degree of traceability can support the complexity of variability change management. However, in software product line establishing appropriate traceability is often difficult due to many-to-many relations in different levels of abstraction and across development given two separated and closely related development life cycles called domain and application. This paper proposes an approach tracing variability based on explicit variation points defined in orthogonal variability model and domain artifacts. And we validate the proposed approach through the Calculator product line. As the results of validation we found that our approach supports the defined variability change scenarios well, but has a disadvantage that many derived variation points are additionally defined and managed.},
  doi       = {10.1007/s11277-016-3195-y},
  groups    = {tmp},
  publisher = {Springer Science and Business Media {LLC}},
  url       = {https://doi.org/10.1007%2Fs11277-016-3195-y},
}

@InCollection{Di_Francescomarino_2015,
  author    = {Chiara Di Francescomarino and Chiara Ghidini and Sergio Tessaris and Itzel V{\'{a}}zquez Sandoval},
  booktitle = {Advanced Information Systems Engineering},
  publisher = {Springer International Publishing},
  title     = {Completing Workflow Traces Using Action Languages},
  year      = {2015},
  pages     = {314--330},
  abstract  = {The capability to monitor process and service executions, which has gone to notably increase in the last decades due to the growing adoption of IT-systems, has brought to the diffusion of several reasoning-based tools for the analysis of process executions. Nevertheless, in many real cases, the different degrees of abstraction of models and IT-data, the lack of IT-support on all the steps of the model, as well as information hiding, result in process execution data conveying only incomplete information concerning the process-level activities. This may hamper the capability to analyse and reason about process executions. This paper presents a novel approach to recover missing information about process executions, relying on a reformulation in terms of a planning problem.},
  doi       = {10.1007/978-3-319-19069-3_20},
  groups    = {tmp},
  url       = {https://doi.org/10.1007%2F978-3-319-19069-3_20},
}

@InProceedings{Pape_2015,
  author    = {Tobias Pape and Tim Felgentreff and Robert Hirschfeld and Anton Gulenko and Carl Friedrich Bolz},
  booktitle = {Proceedings of the 11th Symposium on Dynamic Languages - {DLS} 2015},
  title     = {Language-independent storage strategies for tracing-{JIT}-based virtual machines},
  year      = {2015},
  publisher = {{ACM} Press},
  abstract  = {Storage strategies have been proposed as a run-time optimization for the PyPy Python implementation and have shown promising results for optimizing execution speed and memory requirements. However, it remained unclear whether the approach works equally well in other dynamic languages. Furthermore, while PyPy is based on RPython, a language to write VMs with reusable components such as a tracing just-in-time compiler and garbage collection, the strategies design itself was not generalized to be reusable across languages implemented using that same toolchain. In this paper, we present a general design and implementation for storage strategies and show how they can be reused across different RPython-based languages. We evaluate the performance of our implementation for RSqueak, an RPython-based VM for Squeak/Smalltalk and show that storage strategies may indeed offer performance benefits for certain workloads in other dynamic programming languages.We furthermore evaluate the generality of our implementation by applying it to Topaz, a Ruby VM, and Pycket, a Racket implementation.},
  doi       = {10.1145/2816707.2816716},
  groups    = {Concrete applications, tmp},
  url       = {https://doi.org/10.1145%2F2816707.2816716},
}

@InCollection{Ogunyomi_2015,
  author    = {Babajide Ogunyomi and Louis M. Rose and Dimitrios S. Kolovos},
  booktitle = {Modelling Foundations and Applications},
  publisher = {Springer International Publishing},
  title     = {Property Access Traces for Source Incremental Model-to-Text Transformation},
  year      = {2015},
  pages     = {187--202},
  abstract  = {Automatic generation of textual artefacts (including code, documentation, configuration files, build scripts, etc.) from models in a software development process through the application of model-to-text (M2T) transformation is a common MDE activity. Despite the importance of M2T transformation, contemporary M2T languages lack support for developing transformations that scale with the size of the input model. As MDE is applied to systems of increasing size and complexity, a lack of scalability in M2T (and other) transformation languages hinders industrial adoption. In this paper, we propose a form of runtime analysis that can be used to identify the impact of source model changes on generated textual artefacts. The structures produced by this runtime analysis, property access traces, can be used to perform efficient source-incremental transformation: our experiments show an average reduction of 60% in transformation execution time compared to non-incremental (batch) transformation.},
  doi       = {10.1007/978-3-319-21151-0_13},
  groups    = {MT, tmp, mde},
  url       = {https://doi.org/10.1007%2F978-3-319-21151-0_13},
}

@InProceedings{Bauman_2015,
  author    = {Spenser Bauman and Carl Friedrich Bolz and Robert Hirschfeld and Vasily Kirilichev and Tobias Pape and Jeremy G. Siek and Sam Tobin-Hochstadt},
  booktitle = {Proceedings of the 20th {ACM} {SIGPLAN} International Conference on Functional Programming - {ICFP} 2015},
  title     = {Pycket: a tracing {JIT} for a functional language},
  year      = {2015},
  publisher = {{ACM} Press},
  abstract  = {We present Pycket, a high-performance tracing JIT compiler for Racket. Pycket supports a wide variety of the sophisticated features in Racket such as contracts, continuations, classes, structures, dynamic binding, and more. On average, over a standard suite of benchmarks, Pycket outperforms existing compilers, both Racket's JIT and other highly-optimizing Scheme compilers. Further, Pycket provides much better performance for Racket proxies than existing systems, dramatically reducing the overhead of contracts and gradual typing. We validate this claim with performance evaluation on multiple existing benchmark suites. The Pycket implementation is of independent interest as an application of the RPython meta-tracing framework (originally created for PyPy), which automatically generates tracing JIT compilers from interpreters. Prior work on meta-tracing focuses on bytecode interpreters, whereas Pycket is a high-level interpreter based on the CEK abstract machine and operates directly on abstract syntax trees. Pycket supports proper tail calls and first-class continuations. In the setting of a functional language, where recursion and higher-order functions are more prevalent than explicit loops, the most significant performance challenge for a tracing JIT is identifying which control flows constitute a loop---we discuss two strategies for identifying loops and measure their impact.},
  doi       = {10.1145/2784731.2784740},
  groups    = {Concrete applications, tmp},
  url       = {https://doi.org/10.1145%2F2784731.2784740},
}

@InCollection{Pace_2014,
  author    = {Gordon J. Pace and Michael Rosner},
  booktitle = {Lecture Notes in Computer Science},
  publisher = {Springer International Publishing},
  title     = {Explaining Violation Traces with Finite State Natural Language Generation Models},
  year      = {2014},
  pages     = {179--189},
  abstract  = {An essential element of any verification technique is that of identifying and communicating to the user, system behaviour which leads to a deviation from the expected behaviour. Such behaviours are typically made available as long traces of system actions which would benefit from a natural language explanation of the trace and especially in the context of business logic level specifications. In this paper we present a natural language generation model which can be used to explain such traces. A key idea is that the explanation language is a CNL that is, formally speaking, regular language susceptible transformations that can be expressed with finite state machinery. At the same time it admits various forms of abstraction and simplification which contribute to the naturalness of explanations that are communicated to the user.},
  doi       = {10.1007/978-3-319-10223-8_17},
  groups    = {tmp, Visualization, Trace analysis},
  url       = {https://doi.org/10.1007%2F978-3-319-10223-8_17},
}

@Article{Mat__2014,
  author    = {Alejandro Mat{\'{e}} and Juan Trujillo},
  journal   = {{Computer Standards & Interfaces} Interfaces},
  title     = {Tracing conceptual models{\textquotesingle} evolution in data warehouses by using the model driven architecture},
  year      = {2014},
  month     = {sep},
  number    = {5},
  pages     = {831--843},
  volume    = {36},
  abstract  = {Developing a data warehouse is an ongoing task where new requirements are constantly being added. A widely accepted approach for developing data warehouses is the hybrid approach, where requirements and data sources must be accommodated to a reconciliated data warehouse model. During this process, relationships between conceptual elements specified by user requirements and those supplied by the data sources are lost, since no traceability mechanisms are included. As a result, the designer wastes additional time and effort to update the data warehouse whenever user requirements or data sources change. In this paper, we propose an approach to preserve traceability at conceptual level for data warehouses. Our approach includes a set of traces and their formalization, in order to relate the multidimensional elements specified by user requirements with the concepts extracted from data sources. Therefore, we can easily identify how changes should be incorporated into the data warehouse, and derive it according to the new configuration. In order to minimize the effort required, we define a set of general Query/View/Transformation rules to automate the derivation of traces along with data warehouse elements. Finally, we describe a CASE tool that supports our approach and provide a detailed case study to show the applicability of the proposal.},
  doi       = {10.1016/j.csi.2014.01.004},
  groups    = {tmp},
  publisher = {Elsevier {BV}},
  url       = {https://doi.org/10.1016%2Fj.csi.2014.01.004},
}

@InCollection{Pfeiffer_2014,
  author    = {Rolf-Helge Pfeiffer and Jan Reimann and Andrzej W{\k{a}}sowski},
  booktitle = {Modelling Foundations and Applications},
  publisher = {Springer International Publishing},
  title     = {Language-Independent Traceability with Lässig},
  year      = {2014},
  pages     = {148--163},
  abstract  = {Typical programming languages, including model transformation languages, do not support traceability. Applications requiring inter-object traceability implement traceability support repeatedly for different domains. In this paper we introduce a solution for generic traceability which enables the generation of trace models for all programming languages compiling to Virtual Machine (VM) bytecode by leveraging automatically generated observer aspects.

We implement our solution in a tool called Lässig adding traceability support to all programming languages compiling to the Java Virtual Machine (JVM). We evaluate and discuss general feasibility, correctness, and the performance overhead of our solution by applying it to three model-to-model transformations.

Our generic traceability solution is capable of automatically establishing complete sets of trace links for transformation programs in various languages and at a minimum cost. Lässig is available as an open-source project for integration into modeling frameworks},
  doi       = {10.1007/978-3-319-09195-2_10},
  groups    = {tmp},
  url       = {https://doi.org/10.1007%2F978-3-319-09195-2_10},
}

@InCollection{Inostroza_2014,
  author    = {Pablo Inostroza and Tijs van der Storm and Sebastian Erdweg},
  booktitle = {Theory and Practice of Model Transformations},
  publisher = {Springer International Publishing},
  title     = {Tracing Program Transformations with String Origins},
  year      = {2014},
  pages     = {154--169},
  abstract  = {Program transformations play an important role in domain-specific languages and model-driven development. Tracing the execution of such transformations has well-known benefits for debugging, visualization and error reporting. In this paper, we introduce string origins, a lightweight, generic and portable technique to establish a tracing relation between the textual fragments in the input and output of a program transformation. We discuss the semantics and the implementation of string origins using the Rascal meta programming language as an example. We illustrate the utility of string origins by presenting data structures and operations for tracing generated code, implementing protected regions, performing name resolution and fixing inadvertent name capture in generated code.},
  doi       = {10.1007/978-3-319-08789-4_12},
  groups    = {tmp, NLP use},
  url       = {https://doi.org/10.1007%2F978-3-319-08789-4_12},
}

@InProceedings{Boulanger_2014,
  author    = {Frederic Boulanger and Christophe Jacquet and Cecile Hardebolle and Iuliana Prodan},
  booktitle = {2014 Twelfth {ACM}/{IEEE} Conference on Formal Methods and Models for Codesign ({MEMOCODE})},
  title     = {{TESL}: A language for reconciling heterogeneous execution traces},
  year      = {2014},
  month     = {oct},
  publisher = {{IEEE}},
  abstract  = {Various formalisms deal with time, and each of them has its own notion of time. When designing a system, it is often desirable to combine several of these formalisms to model different parts. Therefore one has to reconcile execution traces that may use different kinds of time (discrete, continuous, periodic) and different time scales (e.g. minutes, microseconds or even angles in degrees). In this article, we present a deterministic model of time which allows the specification of the coincidence of events that occur on different time scales, as well as instantaneous causality between events. This model supports both event-driven and time-driven specifications.},
  doi       = {10.1109/memcod.2014.6961849},
  groups    = {tmp},
  url       = {https://doi.org/10.1109%2Fmemcod.2014.6961849},
}

@InProceedings{Laghouaouta_2014,
  author    = {Youness Laghouaouta and Mahmoud Nassar and Adil Anwar and Jean-Michel Bruel},
  booktitle = {2014 {IEEE} Eighth International Conference on Research Challenges in Information Science ({RCIS})},
  title     = {On the use of graph transformations for model composition traceability},
  year      = {2014},
  month     = {may},
  publisher = {{IEEE}},
  abstract  = {The model composition provides support to build systems based on a set of less complex sub-models. This operation allows managing complexity while supporting the modularity and reusability tasks. Due to the increase number of the involving models, their composition becomes a tedious task. For that, the need for maintaining traceability information is raised to help managing the composition operation. We propose in this work a graph-based model transformations approach, which aims to keep track of the model composition operation. Our objective is to capture traces in an automatic and reusable manner. Finally, a composition scenario is given to demonstrate the feasibility of our proposal.},
  doi       = {10.1109/rcis.2014.6861075},
  groups    = {tmp, mde},
  url       = {https://doi.org/10.1109%2Frcis.2014.6861075},
}

@InProceedings{Saada_2013,
  author    = {Hajer Saada and Marianne Huchard and Clementine Nebut and Houari Sahraoui},
  booktitle = {2013 28th {IEEE}/{ACM} International Conference on Automated Software Engineering ({ASE})},
  title     = {Recovering model transformation traces using multi-objective optimization},
  year      = {2013},
  month     = {nov},
  publisher = {{IEEE}},
  abstract  = {Model Driven Engineering (MDE) is based on a large set of models that are used and manipulated throughout the development cycle. These models are manually or automatically produced and/or exploited using model transformations. To allow engineers to maintain the models and track their changes, recovering transformation traces is essential. In this paper, we propose an automated approach, based on multi-objective optimization, to recover transformation traces between models. Our approach takes as input a source model in the form of a set of fragments (fragments are defined using the source meta-model cardinalities and OCL constraints), and a target model. The recovered transformation traces take the form of many-to-many mappings between the constructs of the two models},
  doi       = {10.1109/ase.2013.6693134},
  groups    = {MT, tmp, mde},
  url       = {https://doi.org/10.1109%2Fase.2013.6693134},
}

@InProceedings{Szabo_2013,
  author    = {Claudia Szabo and Yufei Chen},
  booktitle = {2013 22nd Australian Software Engineering Conference},
  title     = {A Model-Driven Approach for Ensuring Change Traceability and Multi-model Consistency},
  year      = {2013},
  month     = {jun},
  publisher = {{IEEE}},
  abstract  = {In model driven engineering, high-level models of an application are constructed to enable reasoning about functional and non-functional requirements independently of implementation issues and concerns. This allows for reduced maintenance, shortens development time, and permits automated model updates, system model executions, and impact assessment. Part of model driven engineering, multi-modeling integrates models that abstract various aspects of the system, such as I/O, behavioral, and functional among others, at different levels of granularity and using various domain specific modeling languages. An important challenge is to understand the relationship between these models towards preserving multi-model consistency as changes in one model affect other models in the multi-model. This paper presents a multi-modeling architecture that captures model relationships at syntactic and semantic levels. We define a taxonomy of change effects that relies on a relationship correspondence meta-model to highlight and trace the impact of changes across various modeling environments. Following the correspondence meta-model and associated change effects, our prototype implementation ensures that multi-model consistency is met and notifies stakeholders of significant changes. Our case study of a submarine tracking system checks multi model consistency and highlights the impact of changes across system modeling tools that capture its functional and behavioral aspects among others. Our experiments show the feasibility of our approach while highlighting important challenges.},
  doi       = {10.1109/aswec.2013.24},
  groups    = {Metamodels, tmp, mde},
  url       = {https://doi.org/10.1109%2Faswec.2013.24},
}

@InCollection{Santiago_2013,
  author    = {Iv{\'{a}}n Santiago and Juan M. Vara and Valeria de Castro and Esperanza Marcos},
  booktitle = {Communications in Computer and Information Science},
  publisher = {Springer Berlin Heidelberg},
  title     = {Measuring the Effect of Enabling Traces Generation in {ATL} Model Transformations},
  year      = {2013},
  pages     = {229--240},
  abstract  = {The benefits that proper management of traceability information can bring to any given (software development) project are beyond any doubt. These benefits become even more appealing when dealing with traceability does not imply additional efforts. This is the case of Model-Driven Engineering (MDE). As a matter of fact, since model transformations are the wheel that drives MDE proposals forward, traceability data can be automatically available in MDE projects. To that end, the implicit traceability relationships contained in any model transformation have to be made explicit by enriching the model transformation with traces generation capabilities. However, this refinement process implies a cost in terms of quality: enriched transformations are intuitively more complex. To back such intuition, this work presents an empirical study to assess the impact over the quality of the automatic enrichment of model transformations},
  doi       = {10.1007/978-3-642-54092-9_17},
  groups    = {tmp, mde},
  url       = {https://doi.org/10.1007%2F978-3-642-54092-9_17},
}

@Article{Rosenkranz_2013,
  author    = {Christoph Rosenkranz and Marianne Corvera Charaf and Roland Holten},
  journal   = {Journal of Information Technology},
  title     = {Language Quality in Requirements Development: Tracing Communication in the Process of Information Systems Development},
  year      = {2013},
  month     = {sep},
  number    = {3},
  pages     = {198--223},
  volume    = {28},
  abstract  = {Knowledge transfer, communication, and shared understanding between project stakeholders are important factors in requirements development and in the information systems development process. Nevertheless, the impact and analysis of language and linguistic communication during requirements development is still an open issue. In our research, we claim that requirements development depends on the ability to deal with language and communication issues in practice and reach shared understanding of requirements. We propose the concept of language quality as a suitable means for analyzing the emergence of coherent and meaningful requirements. By applying the thereby developed dimensions of language quality to a real information systems development project, we are able to obtain practice-grounded propositions to further evaluate the consequences of different actions on the interaction and communication process of stakeholders in requirements development.},
  doi       = {10.1057/jit.2012.33},
  groups    = {tmp},
  publisher = {{SAGE} Publications},
  url       = {https://doi.org/10.1057%2Fjit.2012.33},
}

@InCollection{Alhaj_2013,
  author    = {Mohammad Alhaj and Dorina C. Petriu},
  booktitle = {Lecture Notes in Computer Science},
  publisher = {Springer Berlin Heidelberg},
  title     = {Traceability Links in Model Transformations between Software and Performance Models},
  year      = {2013},
  pages     = {203--221},
  abstract  = {In Model Driven Engineering, traceability is used to establish relationships between various software artifacts during the software life cycle. Traceability can be also used to define dependencies between related elements in different models, to propagate and verify properties from one model to another and to analyze the impact of changes. In this paper we describe how to define typed trace-links between different kinds of models in our model transformation chain PUMA4SOA, which generates Layered Queuing performance models from UML software models of service-oriented applications. The goal of PUMA4SOA is to help evaluate the performance of SOA systems in the early development phases. In our approach, the traceability links are stored externally in a new model, which maintain traces separately from the source and target models they refer to. We illustrate how traceability links can be used to propagate the results of the performance model back to the original software model.},
  doi       = {10.1007/978-3-642-38911-5_12},
  groups    = {MT, tmp, mde},
  url       = {https://doi.org/10.1007%2F978-3-642-38911-5_12},
}

@Article{George_2012,
  author    = {Mathew George and Klaus-Peter Fischer-Hellmann and Martin Knahl and Udo Bleimann and Shirley Atkinson},
  journal   = {Future Internet},
  title     = {Traceability in Model-Based Testing},
  year      = {2012},
  month     = {nov},
  number    = {4},
  pages     = {1026--1036},
  volume    = {4},
  abstract  = {The growing complexities of software and the demand for shorter time to market are two important challenges that face today’s IT industry. These challenges demand the increase of both productivity and quality of software. Model-based testing is a promising technique for meeting these challenges. Traceability modeling is a key issue and challenge in model-based testing. Relationships between the different models will help to navigate from one model to another, and trace back to the respective requirements and the design model when the test fails. In this paper, we present an approach for bridging the gaps between the different models in model-based testing. We propose relation definition markup language (RDML) for defining the relationships between models.},
  doi       = {10.3390/fi4041026},
  groups    = {tmp, mde},
  publisher = {{MDPI} {AG}},
  url       = {https://doi.org/10.3390%2Ffi4041026},
}

@InCollection{van_Amstel_2012,
  author    = {Marcel F. van Amstel and Mark G. J. van den Brand and Alexander Serebrenik},
  booktitle = {Theory and Practice of Model Transformations},
  publisher = {Springer Berlin Heidelberg},
  title     = {Traceability Visualization in Model Transformations with {TraceVis}},
  year      = {2012},
  pages     = {152--159},
  abstract  = {Model transformations are commonly used to transform models suited for one purpose (e.g., describing a solution in a particular domain) to models suited for a related but different purpose (e.g., simulation or execution). The disadvantage of a transformational approach, however, is that feedback acquired from analyzing transformed models is not reported on the level of the problem domain but on the level of the transformed model. Expressing the feedback on the level of the problem domain requires improving traceability in model transformations.

We propose to visualize traceability links in (chains of) model transformations, thus making traceability amenable for analysis.},
  doi       = {10.1007/978-3-642-30476-7_10},
  groups    = {MT, tmp, mde, Visualization, Trace analysis},
  url       = {https://doi.org/10.1007%2F978-3-642-30476-7_10},
}

@InCollection{Jim_nez_2013,
  author    = {{\'{A}}lvaro Jim{\'{e}}nez and Juan M. Vara and Ver{\'{o}}nica A. Bollati and Esperanza Marcos},
  booktitle = {Building Sustainable Information Systems},
  publisher = {Springer {US}},
  title     = {Model-Driven Development of Model Transformations Supporting Traces Generation},
  year      = {2013},
  pages     = {233--245},
  abstract  = {This work introduces a framework for model-driven development of model transformations that support traces generation. The proposal starts from a high-level specification of the relationships that must hold between the elements of source and target metamodels. Such specification is subsequently refined into lower-level transformation models until they can be serialized into the source code that implements the transformation. Running such transformation produces not only the corresponding source models but also a trace model between the elements of source and target models.},
  doi       = {10.1007/978-1-4614-7540-8_18},
  groups    = {MT, tmp, mde},
  url       = {https://doi.org/10.1007%2F978-1-4614-7540-8_18},
}

@InProceedings{2012,
  author    = {Francisca Rosique, Pedro Sánchez, Diego Alonso and Manuel Jiménez},
  booktitle = {Proceedings of the 7th International Conference on Software Paradigm Trends},
  title     = {Traceability Support for {MDE} Development of Home Automation Systems},
  year      = {2012},
  publisher = {{SciTePress} - Science and and Technology Publications},
  abstract  = {Traceability is a technique to ease determining the impact of changes in the design of software, to support their integration, to preserve knowledge, and to assure the quality and accuracy of the overall system. In this paper, an approach that considers traceability in the context of model-driven development of Home Automation (HA) systems is presented. This combination enables the development of tools with techniques for improving the quality both of the process and of the models obtained. To obtain these advantages we have developed a tool that provides users with traceability reports after applying model transformations. These reports enable developers to study whether all requirements have been considered, the impact of changes, and how they are considered both in architectural decisions and code implementations.},
  doi       = {10.5220/0004081302240229},
  groups    = {tmp, mde},
  url       = {https://doi.org/10.5220%2F0004081302240229},
}

@InProceedings{Sannier_2012,
  author    = {Nicolas Sannier and Benoit Baudry},
  booktitle = {2012 Second {IEEE} International Workshop on Model-Driven Requirements Engineering ({MoDRE})},
  title     = {Toward multilevel textual requirements traceability using model-driven engineering and information retrieval},
  year      = {2012},
  month     = {sep},
  publisher = {{IEEE}},
  abstract  = {In complex industrial projects, textual information remains the main vector of information at the project level. Consequently, requirements are scattered throughout multiple documents expressing different levels of requirements and different kinds of requirements. Formalizing this information and tracing different relationships among documents and organizing this environment present a challenging question. Domain-specific modeling and traceability modeling are Model-Driven Engineering (MDE) techniques that could address various aspects of requirements formalization. Text-based high level requirements can be formalized as document concepts can be gathered and represented. Still, relationships cannot always be determined using sole MDE approaches and, as a consequence, relationships and traceability issue remains. Information retrieval (IR) approaches have already proved to work in an efficient way on large text corpora for requirements traceability analysis but do only consider similarity aspects of flatten documents, losing their organization and hierarchy. This paper aims to introduce how a combined use of both MDE and IR can lead to improved requirements organization and traceability while handling textual ambiguous requirements documents.},
  doi       = {10.1109/modre.2012.6360072},
  groups    = {Metamodels, tmp, mde},
  url       = {https://doi.org/10.1109%2Fmodre.2012.6360072},
}

@InCollection{Graf_2012,
  author    = {Andreas Graf and Nirmal Sasidharan and Ömer Gürsoy},
  booktitle = {Complex Systems Design {\&} Management},
  publisher = {Springer Berlin Heidelberg},
  title     = {Requirements, Traceability and {DSLs} in Eclipse with the Requirements Interchange Format ({ReqIF})},
  year      = {2012},
  pages     = {187--199},
  abstract  = {Requirements engineering (RE) is a crucial aspect in systems development and is the area of ongoing research and process improvement.However, unlike in modeling, there has been no established standard that activities could converge on. In recent years, the emerging Requirements Interchange Format (RIF/ReqIF) gained more and more visibility in the industry, and research projects started to investigate these standards. To avoid redundant efforts in implementing the standard, the VERDE and Deploy projects cooperate to provide a stable common basis for ReqIF implementation that could be leveraged by other research projects as well. In this paper, we present an Eclipse-based extensible implementation of a RIF/ReqIFbased requirements editing platform. In addition, we also investigate two related aspects of RE that take advantage of the common platform. Firstly, how can the quality of requirements be improved by replacing or complementing natural language requirements with formal approaches such as domain specific languages or models. Secondly, how can we establish a robust traceability mechanism that links different artifacts of a development process like requirements, design etc.},
  doi       = {10.1007/978-3-642-25203-7_13},
  groups    = {tmp, mde},
  url       = {https://doi.org/10.1007%2F978-3-642-25203-7_13},
}

@InProceedings{Garces_2011,
  author    = {Kelly Garces and Julien Deantoni and Frederic Mallet},
  booktitle = {2011 37th {EUROMICRO} Conference on Software Engineering and Advanced Applications},
  title     = {A Model-Based Approach for Reconciliation of Polychronous Execution Traces},
  year      = {2011},
  month     = {aug},
  publisher = {{IEEE}},
  abstract  = {Embedded systems are very difficult to design and debug because of the limited access to the device itself. Therefore, debugging usually requires to instrument the code so as to produce execution traces that are then monitored from a base station. Such an intrusive method has a direct impact on performances. In case of multiple interacting embedded targets the problem is even more severe and is not limited to computations but also spreads to communications. To reduce the communication overhead, we propose an approach in which unsynchronized traces from several targets are reconciled a posteriori. Since each target has its own time base without a built-in clock synchronization protocol, our approach requires a multi-clock reconciliation specification. This paper describes our model-based proposal developed during the ANR project RT-Simex. The different steps of the reconciliation are illustrated on a simple case-study used in the project, a terrestrial robot controlled in position.},
  doi       = {10.1109/seaa.2011.47},
  groups    = {tmp},
  url       = {https://doi.org/10.1109%2Fseaa.2011.47},
}

@Article{Sanchez_2011,
  author    = {Pedro Sanchez and Diego Alonso and Francisca Rosique and Barbara Alvarez and Juan A. Pastor},
  journal   = {{IEEE Trans. Comput.} Transactions on Computers},
  title     = {Introducing Safety Requirements Traceability Support in Model-Driven Development of Robotic Applications},
  year      = {2011},
  month     = {aug},
  number    = {8},
  pages     = {1059--1071},
  volume    = {60},
  abstract  = {Requirements traceability is a technique intended to help determine the impact of changes in software design, support their integration, preserve knowledge, and assure the quality and correctness of the overall system. This paper presents an approach that considers traceability of safety requirements in the context of model-driven development of teleoperated services robots. The combination of the model-driven approach with safety requirements traceability makes it possible to construct systems using techniques for automatically identifying, managing, and mitigating risks so that these systems are safe enough to work in a particular environment. To secure the advantages of these mechanisms, we have developed a tool that provides users with traceability reports after applying model transformations. These reports enable developers to determine whether or not all safety requirements have been considered, the impact of changing a safety requirement, and how they are considered both in architectural decisions and code implementations.},
  doi       = {10.1109/tc.2010.149},
  groups    = {Metamodels, tmp, mde},
  publisher = {Institute of Electrical and Electronics Engineers ({IEEE})},
  url       = {https://doi.org/10.1109%2Ftc.2010.149},
}

@Article{Grosch_2011,
  author    = {Vanessa Grosch},
  journal   = {International Journal of Embedded and Real-Time Communication Systems},
  title     = {Requirements Traceability within Model-Based Testing},
  year      = {2011},
  month     = {apr},
  number    = {2},
  pages     = {1--21},
  volume    = {2},
  abstract  = {Requirements traceability enables the linkage between all development artifacts during the development process. Within model-based testing, requirements traceability links the original requirements with test model elements and generated test cases. Current approaches are either not practical or lack the necessary formal foundation for generating requirements-based test cases using model-checking techniques involving the requirements trace. This paper describes a practical and formal approach to ensure requirements traceability. The descriptions of the requirements are defined on path fragments of timed automata or timed state charts. The graphical representation of these paths is called a computation sequence chart (CSC). CSCs are automatically transformed into temporal logic formulae. A model-checking algorithm considers these formulae when generating test cases.},
  doi       = {10.4018/jertcs.2011040101},
  groups    = {tmp, Visualization},
  publisher = {{IGI} Global},
  url       = {https://doi.org/10.4018%2Fjertcs.2011040101},
}

@InCollection{Ono_2010,
  author    = {Kouichi Ono and Manabu Toyota and Ryo Kawahara and Yoshifumi Sakamoto and Takeo Nakada and Naoaki Fukuoka},
  booktitle = {Modelling Foundations and Applications},
  publisher = {Springer Berlin Heidelberg},
  title     = {A Model-Based Method for Evaluating Embedded System Performance by Abstraction of Execution Traces},
  year      = {2010},
  pages     = {233--244},
  abstract  = {his paper describes a model-based method to evaluate performance of embedded systems. The core technology of this modeling method is reverse modeling based on dynamic analysis of the existing systems. A case study of real MFPs (multifunction peripherals/printers) is presented in this paper to evaluate the modeling method.},
  doi       = {10.1007/978-3-642-13595-8_19},
  groups    = {tmp},
  url       = {https://doi.org/10.1007%2F978-3-642-13595-8_19},
}

@InProceedings{Yrj_nen_2010,
  author    = {Anton Yrjönen and Janne Merilinna},
  booktitle = {Proceedings of the 6th {ECMFA} Traceability Workshop on - {ECMFA}-{TW} {\textquotesingle}10},
  title     = {Tooling for the full traceability of non-functional requirements within model-driven development},
  year      = {2010},
  publisher = {{ACM} Press},
  abstract  = {There is an ever-increasing need to rapidly deliver products, whilst, at the same time, also delivering products of high quality. To improve the quality of products and increase productivity within software development processes, all phases of the development process must fit together well. While defining requirements for the system, it must be ensured that the correct requirements are defined as well as ensure that they can be translated into a design fulfilling the requirements. The earlier the correct requirements are found, the easier and cheaper it will be to design good products. Finally, the design must be verified against the correct requirements. To realize this, requirements traceability is of extreme importance for development processes. The non-functional requirements (NFR) are particularly important and difficult. In this paper, we will report on an integrated tooling solution for a Domain-Specific Modelling approach that enables and guides towards defining accurate and non-conflicting requirements. Additionally, the solution enables a full bidirectional traceability from the requirements to models to the implementation, and offers an up-to-date overall view of the state of the requirements within the product.},
  doi       = {10.1145/1814392.1814395},
  groups    = {Metamodels, tmp, mde},
  url       = {https://doi.org/10.1145%2F1814392.1814395},
}

@InProceedings{Levendovszky_2010,
  author    = {Tihamer Levendovszky and Daniel Balasubramanian and Kevin Smyth and Feng Shi and Gabor Karsai},
  booktitle = {Proceedings of the 6th {ECMFA} Traceability Workshop on - {ECMFA}-{TW} {\textquotesingle}10},
  title     = {A transformation instance-based approach to traceability},
  year      = {2010},
  publisher = {{ACM} Press},
  abstract  = {Although traceability is often a suggested requirement for general software development, there are areas such as airborne systems, where traceability is a compulsory part of the development process. This paper describes a tool chain that is able to generate and to follow traceability links across model-to-model and model-to-code transformations, and capable of providing navigability support along these traceability links. We elaborate on the conceptual design of our tool chain and provide details on its realization in a DSML environment underpinned by graph rewriting-based model transformation.},
  doi       = {10.1145/1814392.1814400},
  groups    = {Metamodels, tmp, mde},
  url       = {https://doi.org/10.1145%2F1814392.1814400},
}

@InProceedings{Pfeiffer_2010,
  author    = {Rolf-Helge Pfeiffer and Andrzej W{\k{a}}sowski},
  booktitle = {Proceedings of the 6th {ECMFA} Traceability Workshop on - {ECMFA}-{TW} {\textquotesingle}10},
  title     = {An aspect-based traceability mechanism for domain specific languages},
  year      = {2010},
  publisher = {{ACM} Press},
  abstract  = {Development environments for domain specific modeling usually represent elements of visual models as objects when in memory and as XML elements when persisted. Visual models are editable using different kinds of editors, and both the in-memory representations and the serialization syntax can be manipulated by automatic tools. We present Tengja, a toolkit, that automatically collects the traces between model elements in abstract, visual, and serialization syntax. Once the trace model is established by Tengja it can be used by other applications to synchronize representations involved, or to navigate across models. We demonstrate the toolkit by implementing a simple navigation support on top of it.},
  doi       = {10.1145/1814392.1814399},
  groups    = {tmp, Metamodels},
  url       = {https://doi.org/10.1145%2F1814392.1814399},
}

@InProceedings{bin_Abid_2010,
  author    = {Saad bin Abid},
  booktitle = {Proceedings of the 6th {ECMFA} Traceability Workshop on - {ECMFA}-{TW} {\textquotesingle}10},
  title     = {Resolving feature dependency implementations inconsistencies during product derivation},
  year      = {2010},
  publisher = {{ACM} Press},
  abstract  = {Features implementing the functionality in a software product line (SPL) often interact and depend on each other. It is hard to maintain the consistency between feature dependencies on the model level and the actual implementation over time, resulting in inconsistency during product derivation. We describe our initial results when working with feature dependency implementations and the related inconsistencies in actual code. Our aim is to improve consistency checking during product derivation. We have provided tool support for maintaining consistency between feature dependency implementations on both model and code levels in a product line. The tool chain supports the consistency checking on both the domain engineering and the application levels between actual code and models. We report our experience of managing feature dependency consistency in the context of an existing scientific calculator product line.},
  doi       = {10.1145/1814392.1814397},
  url       = {https://doi.org/10.1145%2F1814392.1814397},
}

@InProceedings{Goknil_2010,
  author    = {Arda Goknil and Ivan Kurtev and Klaas van den Berg},
  booktitle = {Proceedings of the 6th {ECMFA} Traceability Workshop on - {ECMFA}-{TW} {\textquotesingle}10},
  title     = {Tool support for generation and validation of traces between requirements and architecture},
  year      = {2010},
  publisher = {{ACM} Press},
  abstract  = {Traceability is considered crucial for establishing and maintaining consistency between software development artifacts. Although considerable research has been devoted to relating requirements and design artifacts with source code, less attention has been paid to relating requirements with architecture by using well-defined semantics of traces. We present a tool that provides trace establishment by using semantics of traces between R&A (Requirements and Architecture). The tool provides the following: (1) generation/validation of traces by using requirements relations and/or verification of architecture, (2) generation/validation of requirements relations by using traces. The tool uses the semantics of traces together with requirements relations and verification results for generating and validating traces. It is based on model transformations in ATL and term-rewriting logic in Maude.},
  doi       = {10.1145/1814392.1814398},
  groups    = {tmp},
  url       = {https://doi.org/10.1145%2F1814392.1814398},
}

@InProceedings{Dubois_2010,
  author    = {Hubert Dubois and Marie-Agnes Peraldi-Frati and Fadoi Lakhal},
  booktitle = {2010 15th {IEEE} International Conference on Engineering of Complex Computer Systems},
  title     = {A Model for Requirements Traceability in a Heterogeneous Model-Based Design Process: Application to Automotive Embedded Systems},
  year      = {2010},
  month     = {mar},
  publisher = {{IEEE}},
  abstract  = {Requirements traceability modeling is a key issue in real-time embedded design process. In such systems, requirements are of different nature (software-related, system-related, functional or non functional) and must be traced through a multilevel design flow which integrates multiple tools and heterogeneous models. Validation and Verification (V&V) activities must be performed on models and on the final product to check whether they match the initial requirements. Results of design and V&V activities must be able to impact traceability information. We thus propose DARWIN4REQ, a metamodel for requirement traceability, based on three independent flows (requirement model, solution model and V&V model). The new metamodel establishes a link between these flows and affords full traceability of requirements, including those set for heterogeneous models. This paper presents the DARWIN4REQ metamodel and its use in the context of heterogeneous models for requirements modeling, design and V&V. An automotive application illustrates the proposed approach based on UML-profiles such that SYSML, EAST-ADL2 and MARTE for design and on SIMULINK, SyNDEx and TIMESQUARE for V&V activities.},
  doi       = {10.1109/iceccs.2010.2},
  groups    = {Metamodels, tmp},
  url       = {https://doi.org/10.1109%2Ficeccs.2010.2},
}

@InProceedings{Naslavsky_2010,
  author    = {Leila Naslavsky and Hadar Ziv and Debra J. Richardson},
  booktitle = {2010 Third International Conference on Software Testing, Verification and Validation},
  title     = {{MbSRT}2: Model-Based Selective Regression Testing with Traceability},
  year      = {2010},
  publisher = {{IEEE}},
  abstract  = {Widespread adoption of model-centric development has created opportunities for software testing, with Model-Based Testing (MBT). MBT supports the generation of test cases from models and the demonstration of model and source-code compliance. Models evolve, much like source code. Thus, an important activity of MBT is selective regression testing, which selects test cases for retest based on model modifications, rather than source-code modifications. This activity explores relationships between model elements and test cases that traverse those elements to locate retest able test cases. We contribute an approach and prototype to model-based selective regression testing, whereby fine-grain traceability relationships among entities in models and test cases are persisted into a traceability infrastructure throughout the test generation process: the relationships represent reasons for test case creation and are used to select test cases for re-run. The approach builds upon existing regression test selection techniques and adopts scenarios as behavioral modeling perspective. We analyze precision, efficiency and safety of the approach through case studies and through theoretical and intuitive reasoning.},
  doi       = {10.1109/icst.2010.61},
  groups    = {Metamodels, tmp},
  url       = {https://doi.org/10.1109%2Ficst.2010.61},
}

@Article{Her_2010,
  author    = {Jin Sun Her and Hao Yuan and Soo Dong Kim},
  journal   = {Information and Software Technology},
  title     = {Traceability-centric model-driven object-oriented engineering},
  year      = {2010},
  month     = {aug},
  number    = {8},
  pages     = {845--870},
  volume    = {52},
  abstract  = {Context: Object-oriented (OO) development method is a popular paradigm in developing target systems. However, the current practices of OO analysis and design (OOAD) and implementation largely rely on human developers' experience and expertise, making it possible less efficient and more error-prone. Hence, there is room for improving the development efficiency while preserving high quality of programs. Objective: Model-driven development (MDD) is a promising approach to developing programs by machine-assisted model transformation, saving human efforts and reducing the possibility of introducing program faults. Hence, it is appealing to apply key disciplines of MDD in developing OO programs. Method: In this paper, we propose a comprehensive framework for applying MDD on OO program engineering in a rigorous and formal fashion. The framework consists of: (1) a hybrid engineering model of human and machine, (2) meta-models of OOAD artifacts, (3) traceability map with trace links, and (4) transformation rules. Results: We identified five platform independent models and two platform specific models, and defined formal representations for them. We identified 16 traceability links and accordingly 16 transformation rules among the eight artifacts. Through the case study, we showed that our work is feasible and applicable. We assessed our work and concluded that our work is sound, complete, and extendable. Our work established the foundation toward automatic generation of OO programs based on the traceability framework. Conclusion: It is concluded that it is essential to identify the OOAD artifacts, traceability links, and transformation rules for automatic generation of OO programs. It is also important to understand the human involvement nature in MDD and to explicitly treat them in the model transformation.},
  doi       = {10.1016/j.infsof.2010.03.012},
  groups    = {Concrete applications, Metamodels, tmp, mde},
  publisher = {Elsevier {BV}},
  url       = {https://doi.org/10.1016%2Fj.infsof.2010.03.012},
}

@InProceedings{Morgan_2010,
  author    = {Bo Morgan},
  booktitle = {2010 Fourth {IEEE} International Conference on Self-Adaptive and Self-Organizing Systems Workshop},
  title     = {Funk2: A Distributed Processing Language for Reflective Tracing of a Large Critic-Selector Cognitive Architecture},
  year      = {2010},
  month     = {sep},
  publisher = {{IEEE}},
  abstract  = {We see the field of metareasoning to be the answer to many large organizational problems encountered when putting together an understandable cognitive architecture, capable of commonsense reasoning. In this paper we review the EM1 implementation of the Emotion Machine critic-selector architecture, as well as explain the current progress we have made in redesigning this first version implementation. For this purpose of redesign and large-scale implementation, we have written a novel programming language, Funk2, that focuses on efficient metareasoning and procedural reflection, the keystones of the critic-selector architecture. We present an argument for why the Funk2 programming language lends itself to easing the burden on programmers that prefer to not be restricted to strictly declarative programming paradigms by allowing the learning of critic and selector activation strengths by credit assignment through arbitrary procedural code.},
  doi       = {10.1109/sasow.2010.56},
  groups    = {Metamodels, tmp},
  url       = {https://doi.org/10.1109%2Fsasow.2010.56},
}

@Article{Grave_2010,
  author    = {Andrejs Grave},
  journal   = {Scientific Journal of Riga Technical University. Computer Sciences},
  title     = {Testing and Traceability Aspects in the Context of the Model Driven Architecture ({MDA})},
  year      = {2010},
  month     = {jan},
  number    = {1},
  pages     = {52--59},
  volume    = {41},
  abstract  = {With the growth of complexity of the software systems it becomes more complicated to ensure and evaluate quality of the software being built. This paper discusses quality of the software in the context of the Model Driven Architecture. Paper analyses factors that affect quality of the software in the software development projects that are developed using MDA. As one of the important factor that affects quality of the software, is traceability. This paper provides description of the traceability property and importance of it within development of the software. Within context of this paper traceability is considered as a property of a system description technique that allows changes in one of the system descriptions to be traced to the corresponding portions of the other descriptions. This paper is focused on such aspects of the software development as testing and traceability in the context of MDA. Paper contains in review of traceability, MDA and traceability within MDA. Also paper contains description of the method for formal definition of the problem domain – called Topological functioning modeling for model driven architecture (TFMfMDA). This paper introduces method of the application of the TFM as the traceability tool. TFM as the traceability tool can be used to analyze impact of the changes and select most important tests.},
  doi       = {10.2478/v10143-010-0024-8},
  groups    = {tmp, mde},
  publisher = {Walter de Gruyter {GmbH}},
  url       = {https://doi.org/10.2478%2Fv10143-010-0024-8},
}

@InProceedings{Hegedus_2010,
  author    = {Abel Hegedus and Gabor Bergmann and Istvan Rath and Daniel Varro},
  booktitle = {2010 8th {IEEE} International Conference on Software Engineering and Formal Methods},
  title     = {Back-annotation of Simulation Traces with Change-Driven Model Transformations},
  year      = {2010},
  month     = {sep},
  publisher = {{IEEE}},
  abstract  = {Model-driven analysis aims at detecting design flaws early in high-level design models by automatically deriving mathematical models. These analysis models are subsequently investigated by formal verification and validation (V&V) tools, which may retrieve traces violating a certain requirement. Back-annotation aims at mapping back the results of V&V tools to the design model in order to highlight the real source of the fault, to ease making necessary amendments. Here we propose a technique for the back-annotation of simulation traces based on change-driven model transformations. Simulation traces of analysis models will be persisted as a change model with high-level change commands representing macro steps of a trace. This trace is back-annotated to the design model using change-driven transformation rules, which bridge the conceptual differences between macro steps in the analysis and design traces. Our concepts will be demonstrated on the back-annotation problem for analyzing BPEL processes using a Petri net simulator.},
  doi       = {10.1109/sefm.2010.28},
  groups    = {Concrete applications, tmp, Trace analysis, Trace integrity},
  url       = {https://doi.org/10.1109%2Fsefm.2010.28},
}

@InProceedings{Dickerson_2010,
  author    = {Charles Dickerson and Ricardo Valerdi},
  booktitle = {2010 5th International Conference on System of Systems Engineering},
  title     = {Using relational model transformations to reduce complexity in {SoS} requirements traceability: Preliminary investigation},
  year      = {2010},
  month     = {jun},
  publisher = {{IEEE}},
  abstract  = {The principles and methods of Model Driven Architecture are applied to the problem of requirements traceability for a System of Systems (SoS). Model transformations of operational threads are used to reduce the complexity of modeling mission requirements and their flow into the architecture of the SoS. The allocation of requirements to operational mission threads (OMTs) rather than to individual systems reduces the complexity of the requirements tracing. Relational transformations provide a mathematically based formalism for model transformations that permit precise computation of the transformation of operational threads into threads of systems allocated from the SoS. Connectivity requirements for the SoS are also exposed in this way and the number of permissible system threads are seen to correspond directly to the number of permissible transformations. The principles and methods are illustrated by an elementary case study for sensor fusion.},
  comment   = {Req eng.},
  doi       = {10.1109/sysose.2010.5544064},
  groups    = {tmp},
  url       = {https://doi.org/10.1109%2Fsysose.2010.5544064},
}

@Article{Maoz_2009,
  author    = {Shahar Maoz},
  journal   = {Computer},
  title     = {Using Model-Based Traces as Runtime Models},
  year      = {2009},
  month     = {oct},
  number    = {10},
  pages     = {28--36},
  volume    = {42},
  abstract  = {Software engineers typically use code-level tracing to capture a running system's behavior. An alternative is to generate and analyze model-based traces, which contain rich semantic information about the system's runs at the abstraction level that its design models define. A set of metrics and operators can aid such trace analysis.},
  doi       = {10.1109/mc.2009.336},
  groups    = {Concrete applications, tmp},
  publisher = {Institute of Electrical and Electronics Engineers ({IEEE})},
  url       = {https://doi.org/10.1109%2Fmc.2009.336},
}

@InProceedings{Clauzel_2009,
  author    = {Damien Clauzel and Karim Sehaba and Yannick Pri{\'{e}}},
  booktitle = {2009 International Conference on Intelligent Networking and Collaborative Systems},
  title     = {Modelling and Visualising Traces for Reflexivity in Synchronous Collaborative Systems},
  year      = {2009},
  month     = {nov},
  publisher = {{IEEE}},
  abstract  = {This article addresses issues related to traces modelling and visualization in synchronous collaborative learning. The objective is to propose models and tools for representing, transforming, sharing and visualizing traces of users' experiences. The traces here represent the users' activities in their interactions with the learning platform. Our proposition is based on reflexive learning defined as the ability to interact with the situation, in order to meet one's own limitations. This work takes place in the ITHACA project which aims at developing an online learning platform that uses interaction traces as knowledge sources on, and for, the learners' learning as individuals or groups. In this paper, we propose a general framework for trace management and sharing, a generic model of synchronous collaborative activity based on the notion of interaction modes, which we specialized for whiteboard sharing and text chatting. We modelled an IRC client and developed a first implementation.},
  doi       = {10.1109/incos.2009.55},
  groups    = {Tracing processes},
  url       = {https://doi.org/10.1109%2Fincos.2009.55},
}

@Article{Valderas_2009,
  author    = {Pedro Valderas and Vicente Pelechano},
  journal   = {Information and Software Technology},
  title     = {Introducing requirements traceability support in model-driven development of web applications},
  year      = {2009},
  month     = {apr},
  number    = {4},
  pages     = {749--768},
  volume    = {51},
  abstract  = {Requirements traceability is a technique intended to help determine the impact of changes in software design, support their integration, preserve knowledge, and assure the quality and correctness of the overall system. This paper presents an approach that considers traceability of safety requirements in the context of model-driven development of teleoperated services robots. The combination of the model-driven approach with safety requirements traceability makes it possible to construct systems using techniques for automatically identifying, managing, and mitigating risks so that these systems are safe enough to work in a particular environment. To secure the advantages of these mechanisms, we have developed a tool that provides users with traceability reports after applying model transformations. These reports enable developers to determine whether or not all safety requirements have been considered, the impact of changing a safety requirement, and how they are considered both in architectural decisions and code implementations.},
  doi       = {10.1016/j.infsof.2008.09.008},
  groups    = {tmp, mde},
  publisher = {Elsevier {BV}},
  url       = {https://doi.org/10.1016%2Fj.infsof.2008.09.008},
}

@InProceedings{Kerstan_2008,
  author    = {C. Kerstan and N. Bannow and W. Rosenstiel},
  booktitle = {2008 Forum on Specification, Verification and Design Languages},
  title     = {Enabling automated code transformation and variable tracing},
  year      = {2008},
  month     = {sep},
  publisher = {{IEEE}},
  abstract  = {To solve the challenge of hardware/software partitioning and the reuse of legacy system models (Bannow et al., 2004) introduced a module adapter (MA) based approach which is considered in section 2. The described transformation/mapping of functional code into a SystemC model still needs heavy code modifications. Besides the parser that has to be nearly as powerful as a C++ compiler the readability suffers from the necessary changes. This paper introduces an approach which reduces the code modifications to a minimum. The primary objective is to provide a solution to enable an automated application. In this novel approach, code readability and transformation effort are improved significantly by using the powerful operator overloading mechanism of C++. The presented implementation can be used to either realize transparent communication over module barriers, trace simulation data or only for debugging purposes. Some examples demonstrate the applicability and give some incitements for expedient use cases. The presented C++ code can be easily extended by inheritance for custom needs.},
  doi       = {10.1109/fdl.2008.4641447},
  groups    = {Concrete applications, tmp},
  url       = {https://doi.org/10.1109%2Ffdl.2008.4641447},
}

@InProceedings{Boskovic_2007,
  author    = {Marko Boskovic},
  booktitle = {14th Annual {IEEE} International Conference and Workshops on the Engineering of Computer-Based Systems ({ECBS}{\textquotesingle}07)},
  title     = {Model-Based Empirical Performance Evaluation Based on Relational Traces},
  year      = {2007},
  month     = {mar},
  publisher = {{IEEE}},
  abstract  = {Empirical performance evaluation is the process of measuring and calculating performance metrics of deployed software systems. It is a part of performance validation during testing of a software system. The topic of this thesis is an approach for the empirical performance evaluation in the context of model-driven engineering. The hypothesis which will be examined is whether concepts of the temporal databases theory can be used as a general way for empirical performance evaluation of model-driven developed software},
  doi       = {10.1109/ecbs.2007.52},
  groups    = {tmp},
  url       = {https://doi.org/10.1109%2Fecbs.2007.52},
}

@InCollection{Olsen,
  author    = {G{\o}ran K. Olsen and Jon Oldevik},
  booktitle = {Model Driven Architecture- Foundations and Applications},
  publisher = {Springer Berlin Heidelberg},
  title     = {Scenarios of Traceability in Model to Text Transformations},
  year      = {2007},
  pages     = {144--156},
  abstract  = {The challenges of managing change in model-driven development are addressed by traceability mechanisms for model to text transformations. A traceability model, tailored for representing trace information between models and generated code, provides the basis for visualisation and analysis of the relationships between models and code. Usage scenarios for traceability are discussed and illustrated by our traceability implementation.},
  doi       = {10.1007/978-3-540-72901-3_11},
  groups    = {MT, Metamodels, tmp, mde},
  url       = {https://doi.org/10.1007%2F978-3-540-72901-3_11},
}

@Article{Almeida_2007,
  author    = {Jo{\~{a}}o Paulo A. Almeida and Maria-Eugenia Iacob and Pascal van Eck},
  journal   = {Inf Syst Front},
  title     = {Requirements traceability in model-driven development: Applying model and transformation conformance},
  year      = {2007},
  month     = {aug},
  number    = {4},
  pages     = {327--342},
  volume    = {9},
  doi       = {10.1007/s10796-007-9038-3},
  groups    = {Coevolution, tmp, mde},
  publisher = {Springer Science and Business Media {LLC}},
  url       = {https://doi.org/10.1007%2Fs10796-007-9038-3},
}

@Article{Triebsees_2007,
  author    = {Thomas Triebsees},
  journal   = {JSW},
  title     = {Constraint-based Model Transformation: Tracing the Preservation of Semantic Properties},
  year      = {2007},
  month     = {sep},
  number    = {3},
  volume    = {2},
  abstract  = {We present and evaluate a novel constraint based model transformation approach that implements a preservation-centric view. The proposed framework comprises formal preservation constraints that can be used to specify the preservation of invariants that are possibly implemented differently in the source and target model. These invariants are enclosed in concepts, which at the same time serve as grouping mechanism for their different implementations. In that, our framework abstracts from the concrete implementation languages by pre-supposing only a basic set of modeling constructs. To this end, we present two case studies where we apply our approach for the preservation of non-trivial properties and provide some performance analysis where we show that tracking the preservation of a relevant class of complex properties can be done in linear time.},
  doi       = {10.4304/jsw.2.3.19-29},
  groups    = {Metamodels, tmp, mde},
  publisher = {International Academy Publishing ({IAP})},
  url       = {https://doi.org/10.4304%2Fjsw.2.3.19-29},
}

@InProceedings{Almeida_2006,
  author    = {Joao Paulo Almeida and Pascal van Eck and Maria-eugenia Iacob},
  booktitle = {2006 10th {IEEE} International Enterprise Distributed Object Computing Conference ({EDOC}{\textquotesingle}06)},
  title     = {Requirements Traceability and Transformation Conformance in Model-Driven Development},
  year      = {2006},
  month     = {oct},
  publisher = {{IEEE}},
  abstract  = {The variety of design artefacts (models) produced in a model-driven design process results in an intricate relationship between requirements and the various models. This paper proposes a methodological framework that simplifies management of this relationship. This framework is a basis for tracing requirements, assessing the quality of model transformation specifications, metamodels, models and realizations. We propose a notion of conformance between application models which reduces the effort needed for assessment activities. We discuss how this notion of conformance can be integrated with model transformations},
  doi       = {10.1109/edoc.2006.45},
  groups    = {Coevolution, MT, tmp, mde},
  url       = {https://doi.org/10.1109%2Fedoc.2006.45},
}

@InCollection{Brassel_2006,
  author    = {Bernd Brassel and Sebastian Fischer and Frank Huch},
  booktitle = {Logic-Based Program Synthesis and Transformation},
  publisher = {Springer Berlin Heidelberg},
  title     = {A Program Transformation for Tracing Functional Logic Computations},
  year      = {2006},
  pages     = {160--176},
  abstract  = {Tracing program executions is a promising technique to find bugs in lazy functional logic programs. In previous work we developed an extension of a heap based semantics for functional logic languages which generates a trace reflecting the computation of the program. This extension was also prototypically implemented by instrumenting an interpreter for functional logic programs. Since this interpreter is too restricted for real world applications, we developed a program transformation which efficiently computes the trace by means of side effects during the computation. This paper presents our program transformation.},
  doi       = {10.1007/978-3-540-71410-1_12},
  groups    = {MT, tmp},
  url       = {https://doi.org/10.1007%2F978-3-540-71410-1_12},
}

@InProceedings{Peischl_2005,
  author    = {Bernhard Peischl and Franz Wotawa},
  booktitle = {Proceedings of the Sixth sixth international symposium on Automated analysis-driven debugging - {AADEBUG}{\textquotesingle}05},
  title     = {Error traces in model-based debugging of hardware description languages},
  year      = {2005},
  publisher = {{ACM} Press},
  abstract  = {In this article we address the fault localization problem in HDLs, particularly in VHDL designs. Our approach relies on the model-based diagnosis paradigm and, unlike to other approaches that rely on the design's gate-level representation, we accurately represent the program's syntax and semantics in a debugging model. This detailed modeling approach, however, may cause scalability problems for larger designs, thus reducing the model's complexity and size is a crucial issue. Creating a debugging model specifically for a given test case in terms of its execution trace is, although tractable in terms of the model's size, uneligible for source level debugging. We illustrate this result by a simple example and relate it to similar findings in the area of program slicing. Moreover, we present a solution to this problem and discuss implications on software debugging by means of our recent empirical results.},
  doi       = {10.1145/1085130.1085136},
  groups    = {Concrete applications, tmp},
  url       = {https://doi.org/10.1145%2F1085130.1085136},
}

@InCollection{Belkadi_2006,
  author    = {Farouk Belkadi and Eric Bonjour and Maryvonne Dulmet},
  booktitle = {Lecture Notes in Computer Science},
  publisher = {Springer Berlin Heidelberg},
  title     = {Modelling Framework of a Traceability System to Improve Knowledge Sharing and Collaborative Design},
  year      = {2006},
  pages     = {355--364},
  abstract  = {In collaborative design, the results of each activity imply modifications of different objects of the situation and are likely to affect the achievement of other activities. The use of collaborative tools enhances the capitalization process, especially at the stage of information collecting. Conversely, capitalized knowledge can also promote cooperation between actors regarding their situation in common. This paper develops a new modelling framework of a traceability system, based on the concept of work situation, to improve knowledge sharing and collaborative design. It aims at giving designers a collaborative tool to capture information of their work and, simultaneously, a view of the progress of their activity and of other inter-related activities.},
  doi       = {10.1007/11686699_36},
  groups    = {Metamodels},
  url       = {https://doi.org/10.1007%2F11686699_36},
}

@InProceedings{Mason,
  author    = {P. Mason and A. Saeed and P. Arkely and S. Riddle},
  booktitle = {10th {IEEE} International Conference and Workshop on the Engineering of Computer-Based Systems, 2003. Proceedings.},
  title     = {Meta-modelling approach to traceability for avionics: a framework for managing the engineering of computer based aerospace systems},
  year      = {2003},
  publisher = {{IEEE} Comput. Soc},
  abstract  = {Traceability is the common term for mechanisms to record and navigate relationships between artifacts produced by development and assessment processes. Effective management of these relationships is crucial to projects involving the development of complex, safety critical computer based aerospace systems. Practitioners use a range of notations to model such systems. Most have tool support, though a lack of well defined approaches to integration limits traceability between their respective data sets. This paper proposes a framework known as MATrA (Meta-modelling Approach to Traceability for Avionics) that enables traceability links to be established and consistency maintained across data from potentially disjoint tools.},
  doi       = {10.1109/ecbs.2003.1194804},
  groups    = {Metamodels},
  url       = {https://doi.org/10.1109%2Fecbs.2003.1194804},
}

@InProceedings{Nilsson_1999,
  author    = {Henrik Nilsson},
  booktitle = {Proceedings of the fourth {ACM} {SIGPLAN} international conference on Functional programming - {ICFP} {\textquotesingle}99},
  title     = {Tracing piece by piece},
  year      = {1999},
  publisher = {{ACM} Press},
  abstract  = {The advantage of lazy functional languages is that programs may be written declaratively without specifying the exact evaluation order. The ensuing order of evaluation can however be quite involved which makes it difficult to debug such programs using traditional, operational techniques. A solution is to trace the computation in a way which focuses on the declarative aspects and hides irrelevant operational details. The main problem with this approach is the immense cost in time and space of tracing large computations. Dealing with these performance issues is thus the key to practical, general purpose debuggers for lazy functional languages. In this paper we show that computing partial traces on demand by re-executing the traced program is a viable way to overcome these difficulties. This allows any program to be traced using only a fixed amount of extra storage. Since it takes a lot of time to build a complete trace, most of which is wasted since only a fraction of a typical trace is investigated during debugging, partial tracing and repeated re-execution is also attractive from a time perspective. Performance figures are presented to substantiate our claims.},
  doi       = {10.1145/317636.317782},
  groups    = {tmp, Trace analysis},
  url       = {https://doi.org/10.1145%2F317636.317782},
}

@Article{Corbett_1995,
  author    = {Albert T. Corbett and John R. Anderson},
  journal   = {User Model User-Adap Inter},
  title     = {Knowledge tracing: Modeling the acquisition of procedural knowledge},
  year      = {1995},
  number    = {4},
  pages     = {253--278},
  volume    = {4},
  abstract  = {This paper describes an effort to model students' changing knowledge state during skill acquisition. Students in this research are learning to write short programs with the ACT Programming Tutor (APT). APT is constructed around a production rule cognitive model of programming knowledge, called theideal student model. This model allows the tutor to solve exercises along with the student and provide assistance as necessary. As the student works, the tutor also maintains an estimate of the probability that the student has learned each of the rules in the ideal model, in a process calledknowledge tracing. The tutor presents an individualized sequence of exercises to the student based on these probability estimates until the student has ‘mastered’ each rule. The programming tutor, cognitive model and learning and performance assumptions are described. A series of studies is reviewed that examine the empirical validity of knowledge tracing and has led to modifications in the process. Currently the model is quite successful in predicting test performance. Further modifications in the modeling process are discussed that may improve performance levels.},
  doi       = {10.1007/bf01099821},
  groups    = {Tracing processes},
  publisher = {Springer Science and Business Media {LLC}},
  url       = {https://doi.org/10.1007%2Fbf01099821},
}

@InProceedings{Borstler_1992,
  author    = {J. Borstler and T. Janning},
  booktitle = {[1992] Proceedings. The Sixteenth Annual International Computer Software and Applications Conference},
  title     = {Traceability between requirements and design: a transformational approach},
  year      = {1992},
  publisher = {{IEEE} Comput. Soc. Press},
  abstract  = {Modern computer-aided software engineering (CASE) tools raise the need for traceability, i.e. the ability to control the consistency between software documents produced at different stages of the software life-cycle. The authors describe the transformation between an integrated requirements engineering language based on structured analysis and the entity relationship model, and a modern design language. The transformation works incrementally and is sensitive to changes to already transformed parts. The authors outline the transformation algorithm and compare the approach to those found in the literature. A tool which implements the proposed algorithm and supports the proposed traceability is described. The potential and the limits of this approach are highlighted.},
  doi       = {10.1109/cmpsac.1992.217578},
  groups    = {tmp},
  url       = {https://doi.org/10.1109%2Fcmpsac.1992.217578},
}

@InCollection{paige2017-changing-mde,
  author    = {Richard F. Paige and Athanasios Zolotas and Dimitris Kolovos},
  booktitle = {Present and Ulterior Software Engineering},
  publisher = {Springer International Publishing},
  title     = {The Changing Face of Model-Driven Engineering},
  year      = {2017},
  pages     = {103--118},
  abstract  = {Model-Driven Engineering has been studied and applied for many years, and it has evolved to a state where it has been used successfully in a variety of substantial projects. It is now at a state of maturity where there are potentially significant challenges to future adoption. In this chapter, we outline the state of practice in Model-Driven Engineering and point to two important future research directions: support for more flexible approaches to modelling and support for legacy models and modelling technologies.},
  doi       = {10.1007/978-3-319-67425-4_7},
  groups    = {tmp},
  url       = {https://doi.org/10.1007/978-3-319-67425-4_7},
}

@Misc{dblp,
  howpublished = {DBLP - Computer science bibliography.},
  author	   = {The DBLP advisory board},
  month        = jul,
  note         = {https://dblp.org/xml/release/dblp-2020-0701.xml.gz},
  title        = {The dblp team: Monthly snapshot release of July 2020},
  year         = {2020},
  url          = {https://dblp.org/xml/release/dblp-2020-0701.xml.gz},
}

@Comment{jabref-meta: databaseType:bibtex;}

@Comment{jabref-meta: grouping:
0 AllEntriesGroup:;
1 StaticGroup:Metamodels\;0\;0\;0xccffffff\;\;\;;
1 StaticGroup:Coevolution\;0\;1\;0x8a8a8aff\;\;\;;
1 StaticGroup:MT\;0\;0\;0x8a8a8aff\;\;\;;
1 StaticGroup:Metastudies\;0\;1\;0xffffffff\;\;\;;
1 StaticGroup:NLP use\;0\;1\;0x6680e6ff\;\;\;;
1 StaticGroup:Concrete applications\;0\;0\;0x8a8a8aff\;\;\;;
1 StaticGroup:Tracing processes\;0\;1\;0x8a8a8aff\;\;\;;
1 StaticGroup:Trace analysis\;0\;1\;0xff0000ff\;\;\;;
1 StaticGroup:Trace integrity\;0\;1\;0xe64d4dff\;\;\;;
1 StaticGroup:Visualization\;0\;1\;0xb3e6b3ff\;\;\;;
1 StaticGroup:mde\;0\;0\;0x00ffffff\;\;\;;
1 StaticGroup:tmp\;0\;1\;0x8a8a8aff\;\;\;;
1 StaticGroup:certification\;0\;1\;0x8a8a8aff\;\;\;;
}
